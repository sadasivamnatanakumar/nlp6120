<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">Genome Biol</journal-id><journal-title>Genome Biology</journal-title><issn pub-type="ppub">1465-6906</issn><issn pub-type="epub">1465-6914</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">15461798</article-id><article-id pub-id-type="pmc">PMC545600</article-id><article-id pub-id-type="publisher-id">gb-2004-5-10-r80</article-id><article-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</article-id><article-categories><subj-group subj-group-type="heading"><subject>Method</subject></subj-group></article-categories><title-group><article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title></title-group><contrib-group><contrib id="A1" corresp="yes" contrib-type="author"><name><surname>Gentleman</surname><given-names>Robert C</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>rgentlem@jimmy.harvard.edu</email></contrib><contrib id="A2" contrib-type="author"><name><surname>Carey</surname><given-names>Vincent J</given-names></name><xref ref-type="aff" rid="I2">2</xref><email>stvjc@channing.harvard.edu</email></contrib><contrib id="A3" contrib-type="author"><name><surname>Bates</surname><given-names>Douglas M</given-names></name><xref ref-type="aff" rid="I3">3</xref><email>bates@stat.wisc.edu</email></contrib><contrib id="A4" contrib-type="author"><name><surname>Bolstad</surname><given-names>Ben</given-names></name><xref ref-type="aff" rid="I4">4</xref><email>bolstad@stat.berkeley.edu</email></contrib><contrib id="A5" contrib-type="author"><name><surname>Dettling</surname><given-names>Marcel</given-names></name><xref ref-type="aff" rid="I5">5</xref><email>dettling@stat.math.ethz.ch</email></contrib><contrib id="A6" contrib-type="author"><name><surname>Dudoit</surname><given-names>Sandrine</given-names></name><xref ref-type="aff" rid="I4">4</xref><email>sandrine@stat.berkeley.edu</email></contrib><contrib id="A7" contrib-type="author"><name><surname>Ellis</surname><given-names>Byron</given-names></name><xref ref-type="aff" rid="I6">6</xref><email>bellis@hsph.harvard.edu</email></contrib><contrib id="A8" contrib-type="author"><name><surname>Gautier</surname><given-names>Laurent</given-names></name><xref ref-type="aff" rid="I7">7</xref><email>Laurent@cbs.dtu.dk</email></contrib><contrib id="A9" contrib-type="author"><name><surname>Ge</surname><given-names>Yongchao</given-names></name><xref ref-type="aff" rid="I8">8</xref><email>yongchao.ge@mssm.edu</email></contrib><contrib id="A10" contrib-type="author"><name><surname>Gentry</surname><given-names>Jeff</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A11" contrib-type="author"><name><surname>Hornik</surname><given-names>Kurt</given-names></name><xref ref-type="aff" rid="I9">9</xref></contrib><contrib id="A12" contrib-type="author"><name><surname>Hothorn</surname><given-names>Torsten</given-names></name><xref ref-type="aff" rid="I10">10</xref></contrib><contrib id="A13" contrib-type="author"><name><surname>Huber</surname><given-names>Wolfgang</given-names></name><xref ref-type="aff" rid="I11">11</xref></contrib><contrib id="A14" contrib-type="author"><name><surname>Iacus</surname><given-names>Stefano</given-names></name><xref ref-type="aff" rid="I12">12</xref></contrib><contrib id="A15" contrib-type="author"><name><surname>Irizarry</surname><given-names>Rafael</given-names></name><xref ref-type="aff" rid="I13">13</xref></contrib><contrib id="A16" contrib-type="author"><name><surname>Leisch</surname><given-names>Friedrich</given-names></name><xref ref-type="aff" rid="I9">9</xref></contrib><contrib id="A17" contrib-type="author"><name><surname>Li</surname><given-names>Cheng</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib><contrib id="A18" contrib-type="author"><name><surname>Maechler</surname><given-names>Martin</given-names></name><xref ref-type="aff" rid="I5">5</xref></contrib><contrib id="A19" contrib-type="author"><name><surname>Rossini</surname><given-names>Anthony J</given-names></name><xref ref-type="aff" rid="I14">14</xref></contrib><contrib id="A20" contrib-type="author"><name><surname>Sawitzki</surname><given-names>Gunther</given-names></name><xref ref-type="aff" rid="I15">15</xref></contrib><contrib id="A21" contrib-type="author"><name><surname>Smith</surname><given-names>Colin</given-names></name><xref ref-type="aff" rid="I16">16</xref></contrib><contrib id="A22" contrib-type="author"><name><surname>Smyth</surname><given-names>Gordon</given-names></name><xref ref-type="aff" rid="I17">17</xref></contrib><contrib id="A23" contrib-type="author"><name><surname>Tierney</surname><given-names>Luke</given-names></name><xref ref-type="aff" rid="I18">18</xref></contrib><contrib id="A24" contrib-type="author"><name><surname>Yang</surname><given-names>Jean YH</given-names></name><xref ref-type="aff" rid="I19">19</xref></contrib><contrib id="A25" contrib-type="author"><name><surname>Zhang</surname><given-names>Jianhua</given-names></name><xref ref-type="aff" rid="I1">1</xref></contrib></contrib-group><aff id="I1"><label>1</label>Department of Biostatistical Science, Dana-Farber Cancer Institute, 44 Binney St, Boston, MA 02115, USA</aff><aff id="I2"><label>2</label>Channing Laboratory, Brigham and Women's Hospital, 75 Francis Street, Boston, MA 02115, USA</aff><aff id="I3"><label>3</label>Department of Statistics, University of Wisconsin-Madison, 1210 W Dayton St, Madison, WI 53706, USA</aff><aff id="I4"><label>4</label>Division of Biostatistics, University of California, Berkeley, 140 Warren Hall, Berkeley, CA 94720-7360, USA</aff><aff id="I5"><label>5</label>Seminar for Statistics LEO C16, ETH Zentrum, Z&#x000fc;rich CH-8092, Switzerl</aff><aff id="I6"><label>6</label>Department of Statistics, Harvard University, 1 Oxford St, Cambridge, MA 02138, USA</aff><aff id="I7"><label>7</label>Center for Biological Sequence Analysis, Technical University of Denmark, Building 208, Lyngby 2800, Denmark</aff><aff id="I8"><label>8</label>Department of Biomathematical Sciences, Mount Sinai School of Medicine, 1 Gustave Levy Place, Box 1023, New York, NY 10029, USA</aff><aff id="I9"><label>9</label>Institut f&#x000fc;r Statistik und Wahrscheinlichkeitstheorie, TU Wien, Wiedner Hauptstrasse 8-10/1071, Wien 1040, Austria</aff><aff id="I10"><label>10</label>Institut f&#x000fc;r Medizininformatik, Biometrie und Epidemiologie, Friedrich-Alexander-Universit&#x000e4;t Erlangen-N&#x000fc;rnberg, Waldstra&#x000df;e6, D-91054 Erlangen, Germany</aff><aff id="I11"><label>11</label>Division of Molecular Genome Analysis, DKFZ (German Cancer Research Center), 69120 Heidelberg, Germany</aff><aff id="I12"><label>12</label>Department of Economics, University of Milan, 23 Via Mercalli, I-20123 Milan, Italy</aff><aff id="I13"><label>13</label>Department of Biostatistics, Johns Hopkins University, 615 N Wolfe St E3035, Baltimore, MD 21205, USA</aff><aff id="I14"><label>14</label>Department of Medical Education and Biomedical Informatics, University of Washington, Box 357240, 1959 NE Pacific, Seattle, WA 98195, USA</aff><aff id="I15"><label>15</label>Statistisches Labor, Institut f&#x000fc;r Angewandte Mathematik, Im Neuenheimer Feld 294, D 69120, Heidelberg, Germany</aff><aff id="I16"><label>16</label>Department of Molecular Biology, The Scripps Research Institute, 10550 North Torrey Pines Road, TPC-28, La Jolla, CA 92037, USA</aff><aff id="I17"><label>17</label>Division of Genetics and Bioinformatics, The Walter and Eliza Hall Institute of Medical Research, 1G Royal Parade, Parkville, Victoria 3050, Australia</aff><aff id="I18"><label>18</label>Department of Statistics and Actuarial Science, University of Iowa, 241 Schaeffer Hall, Iowa City, IA 52242, USA</aff><aff id="I19"><label>19</label>Center for Bioinformatics and Molecular Biostatistics, Univerisity of California, San Francisco, 500 Parnassus Ave, San Francisco 94143-0560, USA</aff><pub-date pub-type="ppub"><year>2004</year></pub-date><pub-date pub-type="epub"><day>15</day><month>9</month><year>2004</year></pub-date><volume>5</volume><issue>10</issue><fpage>R80</fpage><lpage>R80</lpage><ext-link ext-link-type="uri" xlink:href="http://genomebiology.com/2004/5/10/R80"/><history><date date-type="received"><day>19</day><month>4</month><year>2004</year></date><date date-type="rev-recd"><day>1</day><month>7</month><year>2004</year></date><date date-type="accepted"><day>3</day><month>8</month><year>2004</year></date></history><copyright-statement>Copyright &#x000a9; 2004 Gentleman et al.; licensee BioMed Central Ltd.</copyright-statement><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p></license><abstract abstract-type="short"><p>A detailed description of the aims and methods of the Bioconductor project, an initiative for the collaborative creation of extensible software for computational biology and bioinformatics.</p></abstract><abstract><p>The Bioconductor project is an initiative for the collaborative creation of extensible software for computational biology and bioinformatics. The goals of the project include: fostering collaborative development and widespread use of innovative software, reducing barriers to entry into interdisciplinary scientific research, and promoting the achievement of remote reproducibility of research results. We describe details of our aims and methods, identify current challenges, compare Bioconductor to other open bioinformatics projects, and provide working examples.</p></abstract></article-meta></front><body><sec><title>Background</title><p>The Bioconductor project [<xref ref-type="bibr" rid="B1">1</xref>] is an initiative for the collaborative creation of extensible software for computational biology and bioinformatics (CBB). Biology, molecular biology in particular, is undergoing two related transformations. First, there is a growing awareness of the computational nature of many biological processes and that computational and statistical models can be used to great benefit. Second, developments in high-throughput data acquisition produce requirements for computational and statistical sophistication at each stage of the biological research pipeline. The main goal of the Bioconductor project is creation of a durable and flexible software development and deployment environment that meets these new conceptual, computational and inferential challenges. We strive to reduce barriers to entry to research in CBB. A key aim is simplification of the processes by which statistical researchers can explore and interact fruitfully with data resources and algorithms of CBB, and by which working biologists obtain access to and use of state-of-the-art statistical methods for accurate inference in CBB.</p><p>Among the many challenges that arise for both statisticians and biologists are tasks of data acquisition, data management, data transformation, data modeling, combining different data sources, making use of evolving machine learning methods, and developing new modeling strategies suitable to CBB. We have emphasized transparency, reproducibility, and efficiency of development in our response to these challenges. Fundamental to all these tasks is the need for software; ideas alone cannot solve the substantial problems that arise.</p><p>The primary motivations for an open-source computing environment for statistical genomics are transparency, pursuit of reproducibility and efficiency of development.</p><sec><title>Transparency</title><p>High-throughput methodologies in CBB are extremely complex, and many steps are involved in the conversion of information from low-level information structures (for example, microarray scan images) to statistical databases of expression measures coupled with design and covariate data. It is not possible to say <italic>a priori </italic>how sensitive the ultimate analyses are to variations or errors in the many steps in the pipeline. Credible work in this domain requires exposure of the entire process.</p></sec><sec><title>Pursuit of reproducibility</title><p>Experimental protocols in molecular biology are fully published lists of ingredients and algorithms for creating specific substances or processes. Accuracy of an experimental claim can be checked by complete obedience to the protocol. This standard should be adopted for algorithmic work in CBB. Portable source code should accompany each published analysis, coupled with the data on which the analysis is based.</p></sec><sec><title>Efficiency of development</title><p>By development, we refer not only to the development of the specific computing resource but to the development of computing methods in CBB as a whole. Software and data resources in an open-source environment can be read by interested investigators, and can be modified and extended to achieve new functionalities. Novices can use the open sources as learning materials. This is particularly effective when good documentation protocols are established. The open-source approach thus aids in recruitment and training of future generations of scientists and software developers.</p><p>The rest of this article is devoted to describing the computing science methodology underlying Bioconductor. The main sections detail design methods and specific coding and deployment approaches, describe specific unmet challenges and review limitations and future aims. We then consider a number of other open-source projects that provide software solutions for CBB and end with an example of how one might use Bioconductor software to analyze microarray data.</p></sec></sec><sec><title>Results and discussion</title><sec sec-type="methods"><title>Methodology</title><p>The software development strategy we have adopted has several precedents. In the mid-1980s Richard Stallman started the Free Software Foundation and the GNU project [<xref ref-type="bibr" rid="B2">2</xref>] as an attempt to provide a free and open implementation of the Unix operating system. One of the major motivations for the project was the idea that for researchers in computational sciences "their creations/discoveries (software) should be available for everyone to test, justify, replicate and work on to boost further scientific innovation" [<xref ref-type="bibr" rid="B3">3</xref>]. Together with the Linux kernel, the GNU/Linux combination sparked the huge open-source movement we know today. Open-source software is no longer viewed with prejudice, it has been adopted by major information technology companies and has changed the way we think about computational sciences. A large body of literature exists on how to manage open-source software projects: see Hill [<xref ref-type="bibr" rid="B4">4</xref>] for a good introduction and a comprehensive bibliography.</p><p>One of the key success factors of the Linux kernel is its modular design, which allows for independent and parallel development of code [<xref ref-type="bibr" rid="B5">5</xref>] in a virtual decentralized network [<xref ref-type="bibr" rid="B3">3</xref>]. Developers are not managed within the hierarchy of a company, but are directly responsible for parts of the project and interact directly (where necessary) to build a complex system [<xref ref-type="bibr" rid="B6">6</xref>]. Our organization and development model has attempted to follow these principles, as well as those that have evolved from the R project [<xref ref-type="bibr" rid="B7">7</xref>,<xref ref-type="bibr" rid="B8">8</xref>].</p><p>In this section, we review seven topics important to establishment of a scientific open source software project and discuss them from a CBB point of view: language selection, infrastructure resources, design strategies and commitments, distributed development and recruitment of developers, reuse of exogenous resources, publication and licensure of code, and documentation.</p><sec><title>Language selection</title><p>CBB poses a wide range of challenges, and any software development project will need to consider which specific aspects it will address. For the Bioconductor project we wanted to focus initially on bioinformatics problems. In particular we were interested in data management and analysis problems associated with DNA microarrays. This orientation necessitated a programming environment that had good numerical capabilities, flexible visualization capabilities, access to databases and a wide range of statistical and mathematical algorithms. Our collective experience with R suggested that its range of well-implemented statistical and visualization tools would decrease development and distribution time for robust software for CBB. We also note that R is gaining widespread usage within the CBB community independently of the Bioconductor Project. Many other bioinformatics projects and researchers have found R to be a good language and toolset with which to work. Examples include the Spot system [<xref ref-type="bibr" rid="B9">9</xref>], MAANOVA [<xref ref-type="bibr" rid="B10">10</xref>] and dChip [<xref ref-type="bibr" rid="B11">11</xref>]. We now briefly enumerate features of the R software environment that are important motivations behind its selection.</p><sec><title>Prototyping capabilities</title><p>R is a high-level interpreted language in which one can easily and quickly prototype new computational methods. These methods may not run quickly in the interpreted implementation, and those that are successful and that get widely used will often need to be re-implemented to run faster. This is often a good compromise; we can explore lots of concepts easily and put more effort into those that are successful.</p></sec><sec><title>Packaging protocol</title><p>The R environment includes a well established system for packaging together related software components and documentation. There is a great deal of support in the language for creating, testing, and distributing software in the form of 'packages'. Using a package system lets us develop different software modules and distribute them with clear notions of protocol compliance, test-based validation, version identification, and package interdependencies. The packaging system has been adopted by hundreds of developers around the world and lies at the heart of the Comprehensive R Archive Network, where several hundred independent but interoperable packages addressing a wide range of statistical analysis and visualization objectives may be downloaded as open source.</p></sec><sec><title>Object-oriented programming support</title><p>The complexity of problems in CBB is often translated into a need for many different software tools to attack a single problem. Thus, many software packages are used for a single analysis. To secure reliable package interoperability, we have adopted a formal object-oriented programming discipline, as encoded in the 'S4' system of formal classes and methods [<xref ref-type="bibr" rid="B12">12</xref>]. The Bioconductor project was an early adopter of the S4 discipline and was the motivation for a number of improvements (established by John Chambers) in object-oriented programming for R.</p></sec><sec><title>WWW connectivity</title><p>Access to data from on-line sources is an essential part of most CBB projects. R has a well developed and tested set of functions and packages that provide access to different databases and to web resources (via http, for example). There is also a package for dealing with XML [<xref ref-type="bibr" rid="B13">13</xref>], available from the Omegahat project, and an early version of a package for a SOAP client [<xref ref-type="bibr" rid="B14">14</xref>], SSOAP, also available from the Omegahat project. These are much in line with proposals made by Stein [<xref ref-type="bibr" rid="B15">15</xref>] and have aided our work towards creating an environment in which the user perceives tight integration of diverse data, annotation and analysis resources.</p></sec><sec><title>Statistical simulation and modeling support</title><p>Among the statistical and numerical algorithms provided by R are its random number generators and machine learning algorithms. These have been well tested and are known to be reliable. The Bioconductor Project has been able to adapt these to the requirements in CBB with minimal effort. It is also worth noting that a number of innovations and extensions based on work of researchers involved in the Bioconductor project have been flowing back to the authors of these packages.</p></sec><sec><title>Visualization support</title><p>Among the strengths of R are its data and model visualization capabilities. Like many other areas of R these capabilities are still evolving. We have been able to quickly develop plots to render genes at their chromosomal locations, a heatmap function, along with many other graphical tools. There are clear needs to make many of these plots interactive so that users can query them and navigate through them and our future plans involve such developments.</p></sec><sec><title>Support for concurrent computation</title><p>R has also been the basis for pathbreaking research in parallel statistical computing. Packages such as <italic>snow </italic>and <italic>rpvm </italic>simplify the development of portable interpreted code for computing on a Beowulf or similar computational cluster of workstations. These tools provide simple interfaces that allow for high-level experimentation in parallel computation by computing on functions and environments in concurrent R sessions on possibly heterogeneous machines. The <italic>snow </italic>package provides a higher level of abstraction that is independent of the communication technology such as the message-passing interface (MPI) [<xref ref-type="bibr" rid="B16">16</xref>] or the parallel virtual machine (PVM) [<xref ref-type="bibr" rid="B17">17</xref>]. Parallel random number generation [<xref ref-type="bibr" rid="B18">18</xref>], essential when distributing parts of stochastic simulations across a cluster, is managed by <italic>rsprng</italic>. Practical benefits and problems involved with programming parallel processes in R are described more fully in Rossini <italic>et al. </italic>[<xref ref-type="bibr" rid="B19">19</xref>] and Li and Rossini [<xref ref-type="bibr" rid="B20">20</xref>].</p></sec><sec><title>Community</title><p>Perhaps the most important aspect of using R is its active user and developer communities. This is not a static language. R is undergoing major changes that focus on the changing technological landscape of scientific computing. Exposing biologists to these innovations and simultaneously exposing those involved in statistical computing to the needs of the CBB community has been very fruitful and we hope beneficial to both communities.</p></sec></sec><sec><title>Infrastructure base</title><p>We began with the perspective that significant investment in software infrastructure would be necessary at the early stages. The first two years of the Bioconductor project have included significant effort in developing infrastructure in the form of reusable data structures and software/documentation modules (R packages). The focus on reusable software components is in sharp contrast to the one-off approach that is often adopted. In a one-off solution to a bioinformatics problem, code is written to obtain the answer to a given question. The code is not designed to work for variations on that question or to be adaptable for application to distinct questions, and may indeed only work on the specific dataset to which it was originally applied. A researcher who wishes to perform a kindred analysis must typically construct the tools from scratch. In this situation, the scientific standard of reproducibility of research is not met except via laborious reinvention. It is our hope that reuse, refinement and extension will become the primary software-related activities in bioinformatics. When reusable components are distributed on a sound platform, it becomes feasible to demand that a published novel analysis be accompanied by portable and open software tools that perform all the relevant calculations. This will facilitate direct reproducibility, and will increase the efficiency of research by making transparent the means to vary or extend the new computational method.</p><p>Two examples of the software infrastructure concepts described here are the <monospace>exprSet</monospace> class of the <italic>Biobase </italic>package, and the various Bioconductor metadata packages, for example <italic>hgu95av2</italic>. An <monospace>exprSet</monospace> is a data structure that binds together array-based expression measurements with covariate and administrative data for a collection of microarrays. Based on <monospace>R data.frame</monospace> and <monospace>list</monospace> structures, <monospace>exprSets</monospace> offer much convenience to programmers and analysts for gene filtering, constructing annotation-based subsets, and for other manipulations of microarray results. The exprSet design facilitates a three-tier architecture for providing analysis tools for new microarray platforms: low-level data are bridged to high-level analysis manipulations via the exprSet structure. The designer of low-level processing software can focus on the creation of an exprSet instance, and need not cater for any particular analysis data structure representation. The designer of analysis procedures can ignore low-level structures and processes, and operate directly on the <monospace>exprSet</monospace> representation. This design is responsible for the ease of interoperation of three key Bioconductor packages: <italic>affy</italic>, <italic>marray</italic>, and <italic>limma</italic>.</p><p>The <italic>hgu95av2 </italic>package is one of a large collection of related packages that relate manufactured chip components to biological metadata concerning sequence, gene functionality, gene membership in pathways, and physical and administrative information about genes. The package includes a number of conventionally named hashed environments providing high-performance retrieval of metadata based on probe nomenclature, or retrieval of groups of probe names based on metadata specifications. Both types of information (metadata and probe name sets) can be used very fruitfully with <monospace>exprSets</monospace>: for example, a vector of probe names immediately serves to extract the expression values for the named probes, because the <monospace>exprSet</monospace> structure inherits the named extraction capacity of <monospace>R data.frames</monospace>.</p></sec><sec><title>Design strategies and commitments</title><p>Well-designed scientific software should reduce data complexity, ease access to modeling tools and support integrated access to diverse data resources at a variety of levels. Software infrastructure can form a basis for both good scientific practice (others should be able to easily replicate experimental results) and for innovation.</p><p>The adoption of designing by contract, object-oriented programming, modularization, multiscale executable documentation, and automated resource distribution are some of the basic software engineering strategies employed by the Bioconductor Project.</p><sec><title>Designing by contract</title><p>While we do not employ formal contracting methodologies (for example, Eiffel [<xref ref-type="bibr" rid="B21">21</xref>]) in our coding disciplines, the contracting metaphor is still useful in characterizing the approach to the creation of interoperable components in Bioconductor. As an example, consider the problem of facilitating analysis of expression data stored in a relational database, with the constraints that one wants to be able to work with the data as one would with any exprSet and one does not want to copy unneeded records into R at any time. Technically, data access could occur in various ways, using database connections, DCOM [<xref ref-type="bibr" rid="B22">22</xref>], communications or CORBA [<xref ref-type="bibr" rid="B23">23</xref>], to name but a few. In a designing by contract discipline, the provider of <monospace>exprSet</monospace> functionality must deliver a specified set of functionalities. Whatever object the provider's code returns, it must satisfy the <monospace>exprSets</monospace> contract. Among other things, this means that the object must respond to the application of functions exprs and <monospace>pData</monospace> with objects that satisfy the R matrix and data.frame contracts respectively. It follows that <monospace>exprs</monospace>(<italic>x</italic>) <monospace>[<italic>i,j</italic>]</monospace>, for example, will return the number encoding the expression level for the <italic>i</italic>th gene for the <italic>j</italic>th sample in the object <italic>x</italic>, no matter what the underlying representation of <italic>x</italic>. Here <italic>i </italic>and <italic>j </italic>need not denote numerical indices but can hold any vectors suitable for interrogating matrices via the square-bracket operator. Satisfaction of the contract obligations simplifies specification of analysis procedures, which can be written without any concern for the underlying representations for exprSet information.</p><p>A basic theme in R development is simplifying the means by which developers can state, follow, and verify satisfaction of design contracts of this sort. Environment features that support convenient inheritance of behaviors between related classes with minimal recoding are at a premium in this discipline.</p></sec><sec><title>Object-oriented programming</title><p>There are various approaches to the object-oriented programming methodology. We have encouraged, but do not require, use of the so-called S4 system of formal classes and methods in Bioconductor software. The S4 object paradigm (defined primarily by Chambers [<xref ref-type="bibr" rid="B12">12</xref>] with modifications embodied in R) is similar to that of Common Lisp [<xref ref-type="bibr" rid="B24">24</xref>] and Dylan [<xref ref-type="bibr" rid="B25">25</xref>]. In this system, classes are defined to have specified structures (in terms of a set of typed 'slots') and inheritance relationships, and methods are defined both generically (to specify the basic contract and behavior) and specifically (to cater for objects of particular classes). Constraints can be given for objects intended to instantiate a given class, and objects can be checked for validity of contract satisfaction. The S4 system is a basic tool in carrying out the designing by contract discipline, and has proven quite effective.</p></sec><sec><title>Modularization</title><p>The notion that software should be designed as a system of interacting modules is fairly well established. Modularization can occur at various levels of system structure. We strive for modularization at the data structure, R function and R package levels. This means that data structures are designed to possess minimally sufficient content to have a meaningful role in efficient programming. The <monospace>exprSet</monospace> structure, for example, contains information on expression levels (<monospace>exprs</monospace> slot), variability (<monospace>se.exprs</monospace>), covariate data (<monospace>phenoData</monospace> slot), and several types of metadata (slots <monospace>description</monospace>, <monospace>annotation</monospace> and <monospace>notes</monospace>). The tight binding of covariate data with expression data spares developers the need to track these two types of information separately. The <monospace>exprSet</monospace> structure explicitly excludes information on gene-related annotation (such as gene symbol or chromosome location) because these are potentially volatile and are not needed in many activities involving <monospace>exprSets</monospace>. Modularization at the R function level entails that functions are written to do one meaningful task and no more, and that documents (help pages) are available at the function level with worked examples. This simplifies debugging and testing. Modularization at the package level entails that all packages include sufficient functionality and documentation to be used and understood in isolation from most other packages. Exceptions are formally encoded in files distributed with the package.</p></sec><sec><title>Multiscale and executable documentation</title><p>Accurate and thorough documentation is fundamental to effective software development and use, and must be created and maintained in a uniform fashion to have the greatest impact. We inherit from R a powerful system for small-scale documentation and unit testing in the form of the executable example sections in function-oriented manual pages. We have also introduced a new concept of large-scale documentation with the <italic>vignette </italic>concept. Vignettes go beyond typical man page documentation, which generally focuses on documenting the behavior of a function or small group of functions. The purpose of a vignette is to describe in detail the processing steps required to perform a specific task, which generally involves multiple functions and may involve multiple packages. Users of a package have interactive access to all vignettes associated with that package.</p><p>The <italic>Sweave </italic>system [<xref ref-type="bibr" rid="B26">26</xref>] was adopted for creating and processing vignettes. Once these have been written users can interact with them on different levels. The transformed documents are provided in Adobe's portable document format (PDF) and access to the code chunks from within R is available through various functions in the <italic>tools </italic>package. However, new users will need a simpler interface. Our first offering in this area is the vignette explorer <monospace>vExplorer</monospace> which provides a widget that can be used to navigate the various code chunks. Each chunk is associated with a button and the code is displayed in a window, within the widget. When the user clicks on the button the code is evaluated and the output presented in a second window. Other buttons provide other functionality, such as access to the PDF version of the document. We plan to extend this tool greatly in the coming years and to integrate it closely with research into reproducible research (see [<xref ref-type="bibr" rid="B27">27</xref>] for an illustration).</p></sec><sec><title>Automated software distribution</title><p>The modularity commitment imposes a cost on users who are accustomed to integrated 'end-to-end' environments. Users of Bioconductor need to be familiar with the existence and functionality of a large number of packages. To diminish this cost, we have extended the packaging infrastructure of R/CRAN to better support the deployment and management of packages at the user level. Automatic updating of packages when new versions are available and tools that obtain all package dependencies automatically are among the features provided as part of the reposTools package in Bioconductor. Note that new methods in R package design and distribution include the provision of MD5 checksums with all packages, to help with verification that package contents have not been altered in transit.</p><p>In conclusion, these engineering commitments and developments have led to a reasonably harmonious set of tools for CBB. It is worth considering how the S language notion that 'everything is an object' impacts our approach. We have made use of this notion in our commitment to contracting and object-oriented programming, and in the automated distribution of resources, in which package catalogs and biological metadata are all straightforward R objects. Packages and documents are not yet treatable as R objects, and this leads to complications. We are actively studying methods for simplifying authoring and use of documentation in a multipackage environment with namespaces that allow symbol reuse, and for strengthening the connection between session image and package inventory in use, so that saved R images can be restored exactly to their functional state at session close.</p></sec></sec><sec><title>Distributed development and recruitment of developers</title><p>Distributed development is the process by which individuals who are significantly geographically separated produce and extend a software project. This approach has been used by the R project for approximately 10 years. This was necessitated in this case by the fact no institution currently has sufficient numbers of researchers in this area to support a project of this magnitude. Distributed development facilitates the inclusion of a variety of viewpoints and experiences. Contributions from individuals outside the project led to the expansion of the core developer group. Membership in the core depends upon the willingness of the developer to adopt shared objectives and methods and to submerge personal objectives in preference to creation of software for the greater scientific community.</p><p>Distributed development requires the use of tools and strategies that allow different programmers to work approximately simultaneously on the same components of the project. Among the more important requirements is for a shared code base (or archive) that all members of the project can access and modify together with some form of version management system. We adopted the Concurrent Versions System [<xref ref-type="bibr" rid="B28">28</xref>,<xref ref-type="bibr" rid="B29">29</xref>] and created a central archive, within this system, that all members of the team have access to.</p><p>Additional discipline is needed to ensure that changes by one programmer should not result in a failure of other code in the system. Within the R language, software components are naturally broken into packages, with a formal protocol for package structure and content specified in the R Extensions manual [<xref ref-type="bibr" rid="B30">30</xref>]. Each package should represent a single coherent theme. By using well defined applications programming interfaces (APIs) developers of a package are free to modify their internal structures as long as they continue to provide the documented outputs.</p><p>We rely on the testing mechanisms supported by the R package testing system [<xref ref-type="bibr" rid="B30">30</xref>] to ensure coherent, non-regressive development. Each developer is responsible for documenting all functions and for providing examples and possibly other scripts or sets of commands that test the code. Each developer is responsible for ensuring that all tests run successfully before committing changes back to the central archive. Thus, the person who knows the code best writes the test programs, but all are responsible for running them and ensuring that changes they have made do not affect the code of others. In some cases changes by one author will necessitate change in the code and tests of others. Under the system we are using these situations are detected and dealt with when they occur in development, reducing the frequency with which error reports come from the field.</p><p>Members of the development team communicate via a private mailing list. In many cases they also use private email, telephone and meetings at conferences in order to engage in joint projects and to keep informed about the ideas of other members.</p></sec><sec><title>Reuse of exogenous resources</title><p>We now present three arguments in favor of using and adapting software from other projects rather than re-implementing or reinventing functionality. The first argument that we consider is that writing good software is a challenging problem and any re-implementation of existing algorithms should be avoided if possible. Standard tools and paradigms that have been proven and are well understood should be preferred over new untested approaches. All software contains bugs but well used and maintained software tends to contain fewer.</p><p>The second argument is that CBB is an enormous field and that progress will require the coordinated efforts of many projects and software developers. Thus, we will require structured paradigms for accessing data and algorithms written in other languages and systems. The more structured and integrated this functionality, the easier it will be to use and hence the more it will be used. As specific examples we consider our recent development of tools for working with graph or network structures. There are three main packages in Bioconductor of interacting with graphs. They are <italic>graph</italic>, <italic>RBGL </italic>and <italic>Rgraphviz</italic>. The first of these provides the class descriptions and basic infrastructure for dealing with graphs in R, the second provides access to algorithms on graphs, and the third to a rich collection of graph layout algorithms. The <italic>graph </italic>package was written from scratch for this project, but the other two are interfaces to rich libraries of software routines that have been created by other software projects, BOOST [<xref ref-type="bibr" rid="B31">31</xref>,<xref ref-type="bibr" rid="B32">32</xref>] and <italic>Graphviz </italic>[<xref ref-type="bibr" rid="B23">23</xref>] respectively, both of which are very substantial projects with large code bases. We have no interest in replicating that work and will, wherever possible, simply access the functions and libraries produced by other projects.</p><p>There are many benefits from this approach for us and for the other projects. For bioinformatics and computational biology we gain rapid access to a variety of graph algorithms including graph layout and traversal. The developers in those communities gain a new user base and a new set of problems that they can consider. Gaining a new user base is often very useful, as new users with previously unanticipated needs tend to expose weaknesses in design and implementation that more sophisticated or experienced users are often able to avoid.</p><p>In a similar vein, we plan to develop and encourage collaboration with other projects, including those organized through the Open Bioinformatics Foundation and the International Interoperability Consortium. We have not specifically concentrated on collaboration to this point in part because we have chosen areas for development that do not overlap significantly with the tools provided by those projects. In this case our philosophy remains one of developing interfaces to the software provided by those projects and not re-implementing their work. In some cases, other projects have recognized the potential gains for collaboration and have started developing interfaces for us to their systems, with the intent of making future contributions [<xref ref-type="bibr" rid="B33">33</xref>].</p><p>Another argument in favor of standardization and reuse of existing tools is best made with reference to a specific example. Consider the topic of markup and markup languages. For any specific problem one could quickly devise a markup that is sufficient for that problem. So why then should we adopt a standard such as XML? Among the reasons for this choice is the availability of programmers conversant with the paradigm, and hence lower training costs. A second reason is that the XML community is growing and developing and we will get substantial technological improvements without having to initiate them. This is not unusual. Other areas of computational research are as vibrant as CBB and by coordinating and sharing ideas and innovations we simplify our own tasks while providing stimulus to these other areas.</p></sec><sec><title>Publication and licensing of code</title><p>Modern standards of scientific publication involve peer review and subsequent publication in a journal. Software publication is a slightly different process with limited involvement to date of formal peer review or official journal publication. We release software under an open-source license as our main method of publication. We do this in the hope that it will encourage reproducibility, extension and general adherence to the scientific method. This decision also ensures that the code is open to public scrutiny and comment. There are many other reasons for deciding to release software under an open-source license, some of which are listed in Table <xref ref-type="table" rid="T1">1</xref>.</p><p>Another consideration that arose when determining the form of publication was the need to allow an evolutionary aspect to our own software. There are many reasons for adopting a strategy that would permit us to extend and improve our software offerings over time. The field of CBB is relatively volatile and as new technologies are developed new software and inferential methods are needed. Further, software technology itself is evolving. Thus, we wanted to have a publication strategy that could accommodate changes in software at a variety of levels. We hope that that strategy will also encourage our users to think of software technology as a dynamic field rather than a static one and to therefore be on the lookout for innovations in this arena as well as in more traditional biological ones.</p><p>Our decision to release software in the form of R packages is an important part of this consideration. Packages are easy to distribute, they have version numbers and define an API. A coordinated release of all Bioconductor packages occurs twice every year. At any given time there is a release version of every package and a development version. The only changes allowed to be made on the release version are bug fixes and documentation improvements. This ensures that users will not encounter radical new behaviors in code obtained in the release version. All other changes such as enhancements or design changes are carried out on the development branch [<xref ref-type="bibr" rid="B34">34</xref>].</p><p>Approximately six weeks before a release, a major effort is taken to ensure that all packages on the development branch are coordinated and work well together. During that period extensive testing is carried out through peer review amongst the Bioconductor core. At release time all packages on the development branch that are included in the release change modes and are now released packages. Previous versions of these packages are deprecated in favor of the newly released versions. Simultaneously, a new development branch is made and the developers start to work on packages in the new branch. Note that these version-related administrative operations occur with little impact on developers. The release manager is responsible for package snapshot and file version modifications. The developers' source code base is fairly simple, and need not involve retention of multiple copies of any source code files, even though two versions are active at all times.</p><p>We would also like to point out that there are compelling arguments that can be made in favor of choosing different paradigms for software development and deployment. We are not attempting at this juncture to convince others to distribute software in this way, but rather elucidating our views and the reasons that we made our choice. Under a different set of conditions, or with different goals, it is entirely likely that we would have chosen a different model.</p></sec><sec><title>Special concerns</title><p>We now consider four specific challenges that are raised by research in computational biology and bioinformatics: reproducibility, data evolution and complexity, training users, and responding to user needs.</p><sec><title>Reproducible research</title><p>We would like to address the reproducibility of published work in CBB. Reproducibility is important in its own right, and is the standard for scientific discovery. Reproducibility is an important step in the process of incremental improvement or refinement. In most areas of science researchers continually improve and extend the results of others but for scientific computation this is generally the exception rather than the rule.</p><p>Buckheit and Donoho [<xref ref-type="bibr" rid="B35">35</xref>], referring to the work and philosophy of Claerbout, state the following principle: "An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and that complete set of instructions that generated the figures."</p><p>There are substantial benefits that will come from enabling authors to publish not just an advertisement of their work but rather the work itself. A paradigm that fundamentally shifts publication of computational science from an advertisement of scholarship to the scholarship itself will be a welcome addition. Some of the concepts and tools that can be used in this regard are contained in [<xref ref-type="bibr" rid="B36">36</xref>,<xref ref-type="bibr" rid="B37">37</xref>].</p><p>When attempting to re-implement computational methodology from a published description many difficulties are encountered. Schwab <italic>et al. </italic>[<xref ref-type="bibr" rid="B38">38</xref>] make the following points:</p><p>"Indeed the problem occurs wherever traditional methods of scientific publication are used to describe computational research. In a traditional article the author merely outlines the relevant computations: the limitations of a paper medium prohibit complete documentation including experimental data, parameter values and the author's programs. Consequently, the reader has painfully to re-implement the author's work before verifying and utilizing it.... The reader must spend valuable time merely rediscovering minutiae, which the author was unable to communicate conveniently."</p><p>The development of a system capable of supporting the convenient creation and distribution of reproducible research in CBB is a massive undertaking. Nevertheless, the Bioconductor project has adopted practices and standards that assist in partial achievement of reproducible CBB.</p><p>Publication of the data from which articles are derived is becoming the norm in CBB. This practice provides one of the components needed for reproducible research - access to the data. The other major component that is needed is access to the software and the explicit set of instructions or commands that were used to transform the data to provide the outputs on which the conclusions of the paper rest. In this regard publishing in CBB has been less successful. It is easy to identify major publications in the most prestigious journals that provide sketchy or indecipherable characterizations of computational and inferential processes underlying basic conclusions. This problem could be eliminated if the data housed in public archives were accompanied by portable code and scripts that regenerate the article's figures and tables.</p><p>The combination of R's well-established platform independence with Bioconductor's packaging and documentation standards leads to a system in which distribution of data with working code and scripts can achieve most of the requirements of reproducible and replayable research in CBB. The steps leading to the creation of a table or figure can be clearly exposed in an Sweave document. An R user can export the code for modification or replay with variations on parameter settings, to check robustness of the reported calculations or to explore alternative analysis concepts.</p><p>Thus we believe that R and Bioconductor can provide a start along the path towards generally reproducible research in CBB. The infrastructure in R that is used to support replayability and remote robustness analysis could be implemented in other languages such as Perl [<xref ref-type="bibr" rid="B39">39</xref>] and Python [<xref ref-type="bibr" rid="B40">40</xref>]. All that is needed is some platform-independent format for binding together the data, software and scripts defining the analysis, and a document that can be rendered automatically to a conveniently readable account of the analysis steps and their outcomes. If the format is an R package, this package then constitutes a single distributable software element that embodies the computational science being published. This is precisely the compendium concept espoused in [<xref ref-type="bibr" rid="B36">36</xref>].</p></sec><sec><title>Dynamics of biological annotation</title><p>Metadata are data about data and their definition depends on the perspective of the investigator. Metadata for one investigator may well be experimental data for another. There are two major challenges that we will consider. First is the evolutionary nature of the metadata. As new experiments are done and as our understanding of the biological processes involved increases the metadata changes and evolves. The second major problem that concerns metadata data is its complexity. We are trying to develop software tools that make it easier for data analysts and researchers to use the existing metadata appropriately.</p><p>The constant changing and updating of the metadata suggests that we must have a system or a collection process that ensures that any metadata can be updated and the updates can be distributed. Users of our system will want access to the most recent versions. Our solution has been to place metadata into R packages. These packages are built using a semi-automatic process [<xref ref-type="bibr" rid="B41">41</xref>] and are distributed (and updated) using the package distribution tools developed in the <italic>reposTools </italic>package. There is a natural way to apply version numbers so users can determine if their data are up to date or if necessary they can obtain older versions to verify particular analyses. Further, users can synchronize a variety of metadata packages according to a common version of the data sources that they were constructed from.</p><p>There are a number of advantages that come from automating the process of building data packages. First, the modules are uniform to an extent that would not be possible if the packages were human written. This means that users of this technology need only become acquainted with one package to be acquainted with all such packages. Second, we can create many packages very quickly. Hence the labor savings are substantial. For microarray analyses all data packages should have the same information (chromosomal location, gene ontology categories, and so on). The only difference between the packages is that each references only the specific set of genes (probes) that were assayed. This means that data analysts can easily switch from one type of chip to another. It also means that we can develop a single set of tools for manipulating the metadata and improvements in those tools are available to all users immediately. Users are free to extend data packages with data from other, potentially proprietary, sources.</p><p>Treating the data in the same manner that we treat software has also had many advantages. On the server side we can use the same software distribution tools, indicating updates and improvements with version numbering. On the client side, the user does not need to learn about the storage or internal details of the data packages. They simply install them like other packages and then use them.</p><p>One issue that often arises is whether one should simply rely on online sources for metadata. That is, given an identifier, the user can potentially obtain more up-to-date information by querying the appropriate databases. The data packages we are proposing cannot be as current. There are, however, some disadvantages to the approach of accessing all resources online. First, users are not always online, they are not always aware of all applicable information sources and the investment in person-time to obtain such information can be high. There are also issues of reproducibility that are intractable as the owners of the web resources are free to update and modify their offerings at will. Some, but not all, of these difficulties can be alleviated if the data are available in a web services format.</p><p>Another argument that can be made in favor of our approach, in this context, is that it allows the person constructing the data packages to amalgamate disparate information from a number of sources. In building metadata packages for Bioconductor, we find that some data are available from different sources, and under those circumstances we look for consensus, if possible. The process is quite sophisticated and is detailed in the <italic>AnnBuilder </italic>package and paper [<xref ref-type="bibr" rid="B41">41</xref>].</p></sec><sec><title>Training</title><p>Most of the projects in CBB require a combination of skills from biology, computer science, and statistics. Because the field is new and there has been little specialized training in this area it seems that there is some substantial benefit to be had from paying attention to training. From the perspective of the Bioconductor project, many of our potential users are unfamiliar with the R language and generally are scientifically more aligned with one discipline than all three. It is therefore important that we produce documentation for the software modules that is accessible to all. We have taken a two-pronged approach to this, we have developed substantial amounts of course material aimed at all the constituent disciplines and we have developed a system for interactive use of software and documentation in the form of vignettes and more generally in the form of navigable documents with dynamic content.</p><p>Course materials have been developed and refined over the past two to three years. Several members of the Bioconductor development team have taught courses and subsequently refined the material, based on success and feedback. The materials developed are modular and are freely distributed, although restrictions on publication are made. The focus of the materials is the introduction and use of software developed as part of the Bioconductor project, but that is not a requirement and merely reflects our own specific purposes and goals.</p><p>In this area we feel that we would benefit greatly from contributions from those with more experience in technical document authoring. There are likely to be strategies, concepts and methodologies that are standard practice in that domain that we are largely unaware of. However, in the short term, we rely on the students, our colleagues and the users of the Bioconductor system to guide us and we hope that many will contribute. Others can easily make substantial contributions, even those with little or no programming skills. What is required is domain knowledge in one field of interest and the recognition of a problem that requires additional domain knowledge from another of the fields of interest.</p><p>Our experience has been that many of these new users often transform themselves into developers. Thus, our development of training materials and documentation needs to pay some attention to the needs of this group as well. There are many more software components than we can collectively produce. Attracting others to collaboratively write software is essential to success.</p></sec><sec><title>Responding to user needs</title><p>The success of any software project rests on its ability to both provide solutions to the problems it is addressing and to attract a user community. Perhaps the most effective way of addressing user needs is through an e-mail help list and one was set up as soon as the project became active. In addition it is important to keep a searchable archive available so that the system itself has a memory and new users can be referred there for answers to common questions. It is also important that members of the project deal with bug reports and feature requests through this public forum as it both broadcasts their intentions and provides a public record of the discussion. Our mailing list (mailto:<email>bioconductor@stat.math.ethz.ch</email>) has been successful: there are approximately 800 subscribers and about 3,000 email messages per year.</p><p>Attracting a user community itself requires a method of distributing the software and providing sufficient training materials to allow potential users to explore the system and determine whether it is sufficient for their purposes. An alternate approach would be to develop a graphical user interface (GUI) that made interactions with the system sufficiently self-explanatory that documentation was not needed. We note that this solution is generally more applicable to cases where the underlying software tasks are well defined and well known. In the present case, the software requirements (as well as the statistical and biological requirements) are constantly evolving. R is primarily command-line oriented and we have chosen to follow that paradigm at least for the first few years of development. We would of course welcome and collaborate with those whose goal was in GUI development but our own forays into this area are limited to the production of a handful of widgets that promote user interaction at specific points.</p><p>Users have experienced difficulties downloading and installing both R and the Bioconductor modules. Some of these difficulties have been caused by the users' local environments (firewalls and a lack of direct access to the internet), and some by problems with our software (bugs) which arise in part because it is in general very difficult to adequately test software that interacts over the internet. We have, however, managed to help every user, who was willing to persist, get both R and Bioconductor properly installed. Another substantial difficulty that we had to overcome was to develop a system that allowed users to download not just the software package that they knew they wanted, but additionally, and at the same time, all other software packages that it relies on. With Bioconductor software there is a much larger inter-reliance on software packages (including those that provide machine learning, biological metadata and experimental data) than for most other uses of R and the R package system. The package, reposTools contains much of the necessary infrastructure for handling these tasks. It is a set of functions for dealing with R package repositories which are basically internet locations for collections of R packages.</p><p>Once the basic software is installed, users will need access to documentation such as the training materials described above and other materials such as the vignettes, described in a previous section. Such materials are most valuable if the user can easily obtain and run the examples on their own computer. We note the obvious similarity with this problem and that described in the section on reproducible research. Again, we are in the enjoyable situation of having a paradigm and tools that can serve two purposes.</p></sec></sec></sec><sec><title>Other open-source bioinformatics software projects</title><p>The Open Bioinformatics Foundation supports projects similar to Bioconductor that are nominally rooted in specific programming languages. BioPerl [<xref ref-type="bibr" rid="B42">42</xref>], BioPython [<xref ref-type="bibr" rid="B43">43</xref>] and BioJava [<xref ref-type="bibr" rid="B44">44</xref>] are prominent examples of open-source language-based bioinformatics projects. The intentions and design methodologies of the BioPerl project have been lucidly described by Stajich and colleagues [<xref ref-type="bibr" rid="B45">45</xref>].</p><sec><title>BioPerl</title><p>In this section we consider commonalities and differences between BioPerl and Bioconductor. Both projects have commitments to open source distribution and to community-based development, with an identified core of developers performing primary design and maintenance tasks for the project. Both projects use object-oriented programming methodology, with the intention of abstracting key structural and functional features of computational workflows in bioinformatics and defining stable application programming interfaces (API) that hide implementation details from those who do not need to know them. The toolkits are based on highly portable programming languages. These languages have extensive software resources developed for non-bioinformatic purposes. The repositories for R (Comprehensive R Archive Network, CRAN) and Perl (Comprehensive Perl Archive Network, CPAN) provide mirrored WWW access to structured collections of software modules and documents for a wide variety of workflow elements. Development methodologies targeted at software reuse can realize large gains in productivity by establishing interfaces to existing CPAN or CRAN procedures instead of reimplementing such procedures. For reuse to succeed, the maintainer of the external resource must commit to stability of the resource API. Such stability tends to be the norm for widely-used modules. Finally, both languages have considerable interoperability infrastructure. One implication is that each project can use software written in unrelated languages. R has well-established interfaces to Perl, Python, Java and C. R's API allows software in R to be called from other languages, and the <italic>RSPerl </italic>package [<xref ref-type="bibr" rid="B46">46</xref>] facilitates direct calls to R from Perl. Thus there are many opportunities for symbiotic use of code by Bioconductor and BioPerl developers and users. The following script illustrates the use of BioPerl in R.</p><p>&#x0003e; library(RSPerl)</p><p>&#x0003e; .PerlPackage("Bio::Perl")</p><p>&#x0003e; x &#x0003c;- .Perl("get_sequence", "swiss",</p><p>&#x000a0;&#x000a0;&#x000a0;&#x000a0;"ROA1_HUMAN")</p><p>&#x0003e; x$division()</p><p>[1] "HUMAN"</p><p>&#x0003e; x$accession()</p><p>[1] "P09651"</p><p>&#x0003e; unlist(x$get_keywords())</p><p>[1] "Nuclear protein" "RNA-binding"</p><p>[3] "Repeat" "Ribonucleoprotein"</p><p>[5] "Methylation" "Transport"</p><p>...</p><p>The .PerlPackage command brings the BioPerl modules into scope. .Perl invokes the BioPerl get_sequence subroutine with arguments "swiss" and "ROA1_HUMAN". The resulting R object is a reference to a perl hash. RSPerl infrastructure permits interrogation of the hash via the $ operator. Note that <italic>RSPerl </italic>is not a Bioconductor-supported utility, and that installation of the BioPerl and <italic>RSPerl </italic>resources to allow interoperation can be complicated.</p><p>Key differences between the Bioconductor and BioPerl projects concern scope, approaches to distribution, documentation and testing, and important details of object-oriented design.</p><sec><title>Scope</title><p>BioPerl is clearly slanted towards processing of sequence data and interfacing to sequence databases, with support for sequence visualization and queries for external annotation. Bioconductor is slanted towards statistical analysis of microarray experiments, with major concerns for array preprocessing, quality control, within- and between-array normalization, binding of covariate and design data to expression data, and downstream inference on biological and clinical questions. Bioconductor has packages devoted to diverse microarray manufacturing and analysis paradigms and to other high-throughput assays of interest in computational biology, including serial analysis of gene expression (SAGE), array comparative genomic hybridization (arrayCGH), and proteomic time-of-flight (SELDI-TOF) data. We say the projects are 'slanted' towards these concerns because it is clear that both projects ultimately aim to support general research activities in computational biology.</p></sec><sec><title>Distribution, documentation and testing</title><p>BioPerl inherits the distribution paradigm supported by CPAN. Software modules can be acquired and installed interactively using, for example <monospace>perl -MCPAN -e shell</monospace>. This process supports automated retrieval of requested packages and dependencies, but is not triggered by runtime events. Bioconductor has extended the CRAN distribution functionalities so that packages can be obtained and installed 'just in time', as required by a computational request. For both Perl and R, software modules and packages are structured collections of files, some of which are source code, some of which are documents about the code. The relationship between documentation and testing is somewhat tighter in Bioconductor than in BioPerl. Manual pages and vignettes in Bioconductor include executable code. Failure of the code in a man page or vignette is a quality-control event; experimentation with executable code in manual pages (through the example function of R) is useful for learning about software behavior. In Perl, tests occupy separate programs and are not typically integrated with documentation.</p></sec><sec><title>Details of object-oriented procedure</title><p>Both R and Perl are extensible computer languages. Thus it is possible to introduce software infrastructure supporting different approaches to object-oriented programming (OOP) in various ways in both languages.</p><p>R's core developers have provided two distinct approaches to OOP in R. These approaches are named S3 and S4. In S3, any object can be assigned to a class (or sequence of classes) simply by setting the class name as the value of the object's class attribute. Class hierarchies are defined implicitly at the object level. Generic methods are defined as ordinary functions and class-specific methods are dispatched according to the class of the object being passed as an argument. In S4, formal definition of class structure is supported, and class hierarchy is explicitly defined in class definitions [<xref ref-type="bibr" rid="B12">12</xref>]. Class instances are explicitly constructed and subject to validation at time of construction. Generic methods are non-standard R functions and metadata on generic methods is established at the package level. Specific methods are dispatched according to the class signature of the argument list (multiple dispatch). Overall, the OOP approach embodied in S4 is closer to Dylan or Scheme than to C++ or Java. Bioconductor does not require specific OOP methodology but encourages the use of S4, and core members have contributed special tools for the documentation and testing of S4 OOP methods in R.</p><p>OOP methodology in Perl has a substantial history and is extensively employed in BioPerl. The basic approach to OOP in Perl seems to resemble S3 more than S4, in that Perl's bless operation can associate any perl data instance with any class. The CPAN <monospace>Class::Multimethod</monospace> module can be used to allow multiple dispatch behavior of generic subroutines. The specific classes of objects identified in BioPerl are targeted at sequence data (Seq, LocatableSeq, RelSegment are examples), location data (Simple, Split, Fuzzy), and an important class of objects called interface objects, which are classes whose names end in 'I'. These objects define what methods can be called on objects of specified classes, but do not implement any methods.</p></sec></sec><sec><title>BioJava, BioPython, GMOD and MOBY</title><p>Other open bioinformatics projects have intentions and methods that are closely linked with those of Bioconductor.</p><p>BioJava [<xref ref-type="bibr" rid="B44">44</xref>] provides Dazzle, a servlet framework supporting the Distributed Annotation System specification for sharing sequence data and metadata. Version 1.4 of the BioJava release includes java classes for general alphabets and symbol-list processing, tools for parsing outputs of blast-related analyses, and software for constructing and fitting hidden Markov models. In principle, any of these resources could be used for analysis in Bioconductor/R through the <italic>SJava </italic>interface [<xref ref-type="bibr" rid="B46">46</xref>].</p><p>BioPython [<xref ref-type="bibr" rid="B43">43</xref>] provides software for constructing python objects by parsing output of various alignment or clustering algorithms, and for a variety of downstream tasks including classification. BioPython also provides infrastructure for decomposition of parallelizable tasks into separable processes for computation on a cluster of workstations.</p><p>The Generic Model Organism Database (GMOD) project targets construction of reusable components that can be used to reproduce successful creation of open and widely accessible databases of model organisms (for example, worm, fruitfly and yeast). The main tasks addressed are genome visualization and annotation, literature curation, biological ontology activities, gene expression analysis and pathway visualization and annotation.</p><p>BioMOBY [<xref ref-type="bibr" rid="B47">47</xref>] provides a framework for developing and cataloging web services relevant to molecular biology and genomics. A basic aim is to provide a central registry of data, annotation or analysis services that can be used programmatically to publish and make use of data and annotation resources pertinent to a wide variety of biological contexts.</p><p>As these diverse projects mature, particularly with regard to interoperability, we expect to add infrastructure to Bioconductor to simplify the use of these resources in the context of statistical data analysis. It is our hope that the R and Bioconductor commitments to interoperability make it feasible for developers in other languages to reuse statistical and visualization software already present and tested in R.</p></sec></sec><sec><title>Using Bioconductor (example)</title><p>Results of the Bioconductor project include an extensive repository of software tools, documentation, short course materials, and biological annotation data at [<xref ref-type="bibr" rid="B1">1</xref>]. We describe the use of the software and annotation data by description of a concrete analysis of a microarray archive derived from a leukemia study.</p><p>Acute lymphocytic leukemia (ALL) is a common and difficult-to-treat malignancy with substantial variability in therapeutic outcomes. Some ALL patients have clearly characterized chromosomal aberrations and the functional consequences of these aberrations are not fully understood. Bioconductor tools were used to develop a new characterization of the contrast in gene expression between ALL patients with two specific forms of chromosomal translocation. The most important tasks accomplished with Bioconductor employed simple-to-use tools for state-of-the-art normalization of hundreds of microarrays, clear schematization of normalized expression data bound to detailed covariate data, flexible approaches to gene and sample filtering to support drilling down to manageable and interpretable subsets, flexible visualization technologies for exploration and communication of genomic findings, and programmatic connection between expression platform metadata and biological annotation data supporting convenient functional interpretation. We will illustrate these through a transcript of the actual command/output sequence. More detailed versions of some of the processing and analysis activities sketched here can be found in the vignettes from the <italic>GOstats </italic>package.</p><p>The dataset is from the Ritz laboratory at the Dana Farber Cancer Institute [<xref ref-type="bibr" rid="B48">48</xref>]. It contains data from 128 patients with ALL. Two subgroups are to be compared. The first group consists of patients with a translocation between chromosomes 4 and 11 (labeled ALL1/AF4). The second group consists of patients with a translocation between chromosomes 9 and 22 (labeled BCR/ABL). These conditions are mutually exclusive in this dataset.</p><p>The Affymetrix HGu95Av2 platform was used, and expression measures were normalized using <italic>gcrma </italic>from the <italic>affy </italic>package. The output of this is an object of class <italic>exprSet </italic>which can be used as input for other functions. The package <italic>hgu95av2 </italic>provides biological metadata including mappings from the Affymetrix identifiers to GO, chromosomal location, and so on. These data can, of course be obtained from many other sources, but there are some advantages to having them as an R package.</p><p>After loading the appropriate packages we first subset the ALL <monospace>exprSet</monospace> to extract those samples with the covariates of interest. The design of the <monospace>exprSet</monospace> class includes methods for subsetting both cases and probes. By using the square-bracket notation on ALL, we derive a new <monospace>exprSet</monospace> with data on only the desired patients.</p><p>&#x0003e; data("ALL")</p><p>&#x0003e; eset &#x0003c;- ALL[, ALL$mol %in%</p><p>c("BCR/ABL", "ALL1/AF4")]</p><p>Next we find genes which are differentially expressed between the ALL1/AF4 and BCR/ABL groups. We use the function <monospace>lmFit</monospace> from the <italic>limma </italic>package, which can assess differential expression between many different groups and conditions simultaneously. The function <monospace>lmFit</monospace> accepts a model matrix which describes the experimental design and produces an output object of class <monospace>MArrayLM</monospace> which stores the fitted model information for each gene. The fitted model object is further processed by the <monospace>eBayes</monospace> function to produce empirical Bayes test statistics for each gene, including moderated <italic>t</italic>-statistics, <italic>p</italic>-values and log-odds of differential expression. The log<sub>2</sub>-fold changes, average intensites and Holm-adjusted <italic>p</italic>-values are displayed for the top 10 genes (Figure <xref ref-type="fig" rid="F1">1</xref>).</p><p>We select those genes that have adjusted <italic>p</italic>-values below 0.05. The default method of adjusting for multiple comparisons uses Holm's method to control the family-wise error rate. We could use a less conservative method such as the false discovery rate, and the multtest package offers other possibilities, but for this example we will use the very stringent Holm method to select a small number of genes.</p><p>&#x0003e; selected &#x0003c;- p.adjust(fit$p.value[, 2])</p><p>&#x0003c; 0.05</p><p>&#x0003e; esetSel &#x0003c;- eset [selected, ]</p><p>There are 165 genes selected for further analysis. A heat map produced by the heatmap function from R allows us to visualize the differential action of these genes between the two groups of patients. Note how the different software modules can be integrated to provide a very rich data-analysis environment. Figure <xref ref-type="fig" rid="F2">2</xref> shows clearly that these two groups can be distinguished in terms of gene expression.</p><p>We can carry out many other tests, for example, whether genes encoded on a particular chromosome (or perhaps on a specific strand of a chromosome) are over-represented amongst those selected by moderated <italic>t</italic>-test. Many of these questions are normally addressed in terms of a hypergeometric distribution, but they can also be thought of as two-way or multi-way tables, and alternate statistical tests (all readily available in R) can be applied to the resulting data.</p><p>We turn our attention briefly to the use of the Gene Ontology (GO) annotation in conjunction with these data. We first identify the set of unique LocusLink identifiers among our selected Affymetrix probes. The function <monospace>GOHyperG</monospace> is found in the <italic>GOstats </italic>package. It carries out a hypergeometric test for an overabundance of genes in our selected list of genes for each term in the GO graph that is induced by these genes (Figure <xref ref-type="fig" rid="F3">3</xref>).</p><p>The smallest <italic>p</italic>-value found was 1.1e-8 and it corresponds to the term, "MHC class II receptor activity". We see that six of the 12 genes with this GO annotation have been selected. Had we used a slightly less conservative gene selection method then the number of selected genes in this GO annotation would have been even higher.</p><p>Reproducing the above results for any other species or chip for which an annotation package was available would require almost no changes to the code. The analyst need only substitute the references to the data package, <italic>hgu95av2</italic>, with those for their array and the basic principles and code are unchanged.</p><p>Similarly, substitution of other algorithms or statistical tests is possible as the data analyst has access to the full and complete source code. All tools are modifiable at the source level to suit local requirements.</p></sec></sec><sec><title>Conclusions</title><p>We have detailed the approach to software development taken by the Bioconductor project. Bioconductor has been operational for about three years now and in that time it has become a prominent software project for CBB. We argue that the success of the project is due to many factors. These include the choice of R as the main development language, the adoption of standard practices of software design and a belief that the creation of software infrastructure is an important and essential component of a successful project of this size.</p><p>The group dynamic has also been an important factor in the success of Bioconductor. A willingness to work together, to see that cooperation and coordination in software development yields substantial benefits for the developers and the users and encouraging others to join and contribute to the project are also major factors in our success.</p><p>To date the project provides the following resources: an online repository for obtaining software, data and metadata, papers, and training materials; a development team that coordinates the discussion of software strategies and development; a user community that provides software testing, suggested improvements and self-help; more than 80 software packages, hundreds of metadata packages and a number of experimental data packages.</p><p>At this point it is worth considering the future. While many of the packages we have developed have been aimed at particular problems, there have been others that were designed to support future developments. And that future seems very interesting. Many of the new problems we are encountering in CBB are not easily addressed by technology transfer, but rather require new statistical methods and software tools. We hope that we can encourage more statisticians to become involved in this area of research and to orient themselves and their research to the mixture of methodology and software development that is necessary in this field.</p><p>In conclusion we would like to note that the Bioconductor Project has many developers, not all of whom are authors of this paper, and all have their own objectives and goals. The views presented here are not intended to be comprehensive nor prescriptive but rather to present our collective experiences and the authors' shared goals. In a very simplified version these can be summarized in the view that coordinated cooperative software development is the appropriate mechanism for fostering good research in CBB.</p></sec></body><back><ref-list><ref id="B1"><citation citation-type="other"><article-title>Bioconductor</article-title><ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org"/></citation></ref><ref id="B2"><citation citation-type="other"><article-title>GNU operating system - Free Software Foundation</article-title><ext-link ext-link-type="uri" xlink:href="http://www.gnu.org"/></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Dafermos</surname><given-names>GN</given-names></name></person-group><article-title>Management and virtual decentralised networks: The Linux project.</article-title><source>First Monday</source><year>2001</year><volume>6</volume><issue>11</issue><ext-link ext-link-type="uri" xlink:href="http://www.firstmonday.org/issues/issue6_11/dafermos/index.html"/></citation></ref><ref id="B4"><citation citation-type="other"><article-title>Free Software Project Management HOWTO</article-title><ext-link ext-link-type="uri" xlink:href="http://www.tldp.org/HOWTO/Software-Proj-Mgmt-HOWTO"/></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Torvalds</surname><given-names>L</given-names></name></person-group><article-title>The Linux edge.</article-title><source>Comm Assoc Comput Machinery</source><year>1999</year><volume>42</volume><fpage>38</fpage><lpage>39</lpage><pub-id pub-id-type="doi">10.1145/299157.299165</pub-id></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Raymond</surname><given-names>ES</given-names></name></person-group><article-title>The cathedral and the bazaar.</article-title><source>First Monday</source><year>1998</year><volume>3</volume><issue>3</issue><ext-link ext-link-type="uri" xlink:href="http://www.firstmonday.org/issues/issue3_3/raymond/index.html"/></citation></ref><ref id="B7"><citation citation-type="other"><person-group person-group-type="author"><collab>R Development Core Team</collab></person-group><article-title>R: a language and environment for statistical computing.</article-title><source>Vienna, Austria: R Foundation for Statistical Computing</source><year>2003</year></citation></ref><ref id="B8"><citation citation-type="other"><article-title>The R project for statistical computing</article-title><ext-link ext-link-type="uri" xlink:href="http://www.R-project.org"/></citation></ref><ref id="B9"><citation citation-type="other"><article-title>Spot home page</article-title><ext-link ext-link-type="uri" xlink:href="http://spot.cmis.csiro.au/spot"/></citation></ref><ref id="B10"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Wu</surname><given-names>H</given-names></name><name><surname>Kerr</surname><given-names>MK</given-names></name><name><surname>Cui</surname><given-names>X</given-names></name><name><surname>Churchill</surname><given-names>GA</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Parmigiani G, Garrett E, Irizarry R, Zeger S</surname></name></person-group><article-title>MAANOVA: a software package for the analysis of spotted cDNA microarray experiments.</article-title><source>In The Analysis of Gene Expression Data: Methods and Software</source><year>2003</year><publisher-name>New York: Springer-Verlag</publisher-name><fpage>313</fpage><lpage>341</lpage></citation></ref><ref id="B11"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>C</given-names></name><name><surname>Wong</surname><given-names>WH</given-names></name></person-group><article-title>Model based analysis of oligonucleotide arrays: expression index computation and outlier detection.</article-title><source>Proc Natl Acad Sci USA</source><year>2001</year><volume>98</volume><fpage>31</fpage><lpage>36</lpage><pub-id pub-id-type="pmid">11134512</pub-id><pub-id pub-id-type="doi">10.1073/pnas.011404098</pub-id></citation></ref><ref id="B12"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Chambers</surname><given-names>JM</given-names></name></person-group><source>Programming with Data: A Guide to the S Language</source><year>1998</year><publisher-name>New York: Springer-Verlag</publisher-name></citation></ref><ref id="B13"><citation citation-type="other"><article-title>eXtensible markup language (XML)</article-title><ext-link ext-link-type="uri" xlink:href="http://www.w3.org/XML"/></citation></ref><ref id="B14"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Box</surname><given-names>D</given-names></name><name><surname>Ehnebuske</surname><given-names>D</given-names></name><name><surname>Kakivaya</surname><given-names>G</given-names></name><name><surname>Layman</surname><given-names>A</given-names></name><name><surname>Mendelsohn</surname><given-names>N</given-names></name><name><surname>Nielsen</surname><given-names>H</given-names></name><name><surname>Thatte</surname><given-names>S</given-names></name><name><surname>Winer</surname><given-names>D</given-names></name></person-group><article-title>Simple Object Access Protocol (SOAP) 1.1.</article-title><ext-link ext-link-type="uri" xlink:href="http://www.w3.org/TR/SOAP/"/></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Stein</surname><given-names>L</given-names></name></person-group><article-title>Creating a bioinformatics nation.</article-title><source>Nature</source><year>2002</year><volume>417</volume><fpage>119</fpage><lpage>120</lpage><pub-id pub-id-type="pmid">12000935</pub-id><pub-id pub-id-type="doi">10.1038/417119a</pub-id></citation></ref><ref id="B16"><citation citation-type="other"><article-title>Message-Passing Interface (MPI)</article-title><ext-link ext-link-type="uri" xlink:href="http://www.mpi-forum.org"/></citation></ref><ref id="B17"><citation citation-type="other"><article-title>Parallel Virtual Machine (PVM)</article-title><ext-link ext-link-type="uri" xlink:href="http://www.csm.ornl.gov/pvm/pvm_home.html"/></citation></ref><ref id="B18"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Mascagni</surname><given-names>M</given-names></name><name><surname>Ceperley</surname><given-names>DM</given-names></name><name><surname>Srinivasan</surname><given-names>A</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Niederreiter H, Spanier J</surname></name></person-group><article-title>SPRNG: a scalable library for parallel pseudorandom number generation.</article-title><source>In Monte Carlo and Quasi-Monte Carlo Methods 1998</source><year>2000</year><publisher-name>Berlin: Springer Verlag</publisher-name></citation></ref><ref id="B19"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Rossini</surname><given-names>AJ</given-names></name><name><surname>Tierney</surname><given-names>L</given-names></name><name><surname>Li</surname><given-names>M</given-names></name></person-group><article-title>Simple parallel statistical computing in R.</article-title><source>University of Washington Biostatistics Technical Report #193</source><year>2003</year><ext-link ext-link-type="uri" xlink:href="http://www.bepress.com/uwbiostat/paper193"/></citation></ref><ref id="B20"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>M</given-names></name><name><surname>Rossini</surname><given-names>AJ</given-names></name></person-group><article-title>RPVM: cluster statistical computing in R.</article-title><source>RNews</source><year>2001</year><volume>1</volume><fpage>4</fpage><lpage>7</lpage></citation></ref><ref id="B21"><citation citation-type="other"><article-title>SmartEiffel - the GNU Eiffel compiler</article-title><ext-link ext-link-type="uri" xlink:href="http://smarteiffel.loria.fr"/></citation></ref><ref id="B22"><citation citation-type="other"><article-title>Distributed component object model (DCOM)</article-title><ext-link ext-link-type="uri" xlink:href="http://www.microsoft.com/com/tech/dcom.asp"/></citation></ref><ref id="B23"><citation citation-type="other"><article-title>GraphViz</article-title><ext-link ext-link-type="uri" xlink:href="http://www.graphviz.org"/></citation></ref><ref id="B24"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Steele</surname><given-names>GL</given-names></name></person-group><source>Common LISP: The Language</source><year>1990</year><publisher-name>London: Butterworth-Heinemann</publisher-name></citation></ref><ref id="B25"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Shalit</surname><given-names>A</given-names></name><name><surname>Starbuck</surname><given-names>O</given-names></name><name><surname>Moon</surname><given-names>D</given-names></name></person-group><source>Dylan Reference Manual</source><year>1996</year><publisher-name>Boston, MA: Addison-Wesley</publisher-name></citation></ref><ref id="B26"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Leisch</surname><given-names>F</given-names></name></person-group><person-group person-group-type="editor"><name><surname>H&#x000e4;rdle W, R&#x000f6;nz B</surname></name></person-group><article-title>Sweave: dynamic generation of statistical reports using literate data analysis.</article-title><source>In Compstat 2002 - Proceedings in Computational Statistics</source><year>2002</year><publisher-name>Heidelberg, Germany: Physika Verlag</publisher-name><fpage>575</fpage><lpage>580</lpage></citation></ref><ref id="B27"><citation citation-type="other"><article-title>Vignette screenshot</article-title><ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/Screenshots/vExplorer.jpg"/></citation></ref><ref id="B28"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Purdy</surname><given-names>GN</given-names></name></person-group><source>CVS Pocket Reference</source><year>2000</year><publisher-name>Sebastopol, CA: O'Reilly &#x00026; Associates</publisher-name></citation></ref><ref id="B29"><citation citation-type="other"><article-title>Concurrent Versions System (CVS)</article-title><ext-link ext-link-type="uri" xlink:href="http://www.cvshome.org"/></citation></ref><ref id="B30"><citation citation-type="other"><person-group person-group-type="author"><collab>R Development Core Team</collab></person-group><article-title>Writing R extensions.</article-title><source>Vienna, Austria: R Foundation for Statistical Computing</source><year>2003</year></citation></ref><ref id="B31"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Siek</surname><given-names>JG</given-names></name><name><surname>Lee</surname><given-names>LQ</given-names></name><name><surname>Lumsdaine</surname><given-names>A</given-names></name></person-group><source>The Boost Graph Library: User Guide and Reference Manual</source><year>2001</year><publisher-name>Boston, MA: Addison-Wesley</publisher-name></citation></ref><ref id="B32"><citation citation-type="other"><article-title>BOOST</article-title><ext-link ext-link-type="uri" xlink:href="http://www.boost.org"/></citation></ref><ref id="B33"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Mei</surname><given-names>H</given-names></name><name><surname>Tarczy-Hornoch</surname><given-names>P</given-names></name><name><surname>Mork</surname><given-names>P</given-names></name><name><surname>Rossini</surname><given-names>AJ</given-names></name><name><surname>Shaker</surname><given-names>R</given-names></name><name><surname>Donelson</surname><given-names>L</given-names></name></person-group><article-title>Expression array annotation using the BioMediator biological data integration system and the Bioconductor analytic platform.</article-title><source>In Proceedings AMIA 2003</source><year>2003</year><publisher-name>Bethesda, MD: American Medical Informatics Association</publisher-name></citation></ref><ref id="B34"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Raymond</surname><given-names>ES</given-names></name></person-group><article-title>Software Release Practice HOWTO</article-title><ext-link ext-link-type="uri" xlink:href="http://tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html"/></citation></ref><ref id="B35"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Buckheit</surname><given-names>J</given-names></name><name><surname>Donoho</surname><given-names>DL</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Antoniadis A</surname></name></person-group><article-title>Wavelab and reproducible research.</article-title><source>In Wavelets and Statistics</source><year>1995</year><publisher-name>New York:Springer-Verlag</publisher-name></citation></ref><ref id="B36"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Gentleman</surname><given-names>R</given-names></name><name><surname>Temple Lang</surname><given-names>D</given-names></name></person-group><article-title>Statistical analyses and reproducible research.</article-title><source>Bioconductor Project Working Paper #2</source><year>2002</year><ext-link ext-link-type="uri" xlink:href="http://www.bepress.com/bioconductor/paper2"/></citation></ref><ref id="B37"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Rossini</surname><given-names>AJ</given-names></name><name><surname>Leisch</surname><given-names>F</given-names></name></person-group><article-title>Literate statistical practice.</article-title><source>University of Washington Biostatistics Technical Report #194</source><year>2003</year><ext-link ext-link-type="uri" xlink:href="http://www.bepress.com/uwbiostat/paper194"/></citation></ref><ref id="B38"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Schwab</surname><given-names>M</given-names></name><name><surname>Karrenbach</surname><given-names>M</given-names></name><name><surname>Claerbout</surname><given-names>J</given-names></name></person-group><article-title>Making scientific computations reproducible.</article-title><source>Technical Report, Stanford University Stanford: Stanford Exploration Project</source><year>1996</year></citation></ref><ref id="B39"><citation citation-type="other"><article-title>The Perl directory</article-title><ext-link ext-link-type="uri" xlink:href="http://www.perl.org"/></citation></ref><ref id="B40"><citation citation-type="other"><article-title>Python programming language</article-title><ext-link ext-link-type="uri" xlink:href="http://www.python.org"/></citation></ref><ref id="B41"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>J</given-names></name><name><surname>Carey</surname><given-names>V</given-names></name><name><surname>Gentleman</surname><given-names>R</given-names></name></person-group><article-title>An extensible application for assembling annotation for genomic data.</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>155</fpage><lpage>56</lpage><pub-id pub-id-type="pmid">12499308</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/19.1.155</pub-id></citation></ref><ref id="B42"><citation citation-type="other"><article-title>BioPerl</article-title><ext-link ext-link-type="uri" xlink:href="http://BioPerl.org"/></citation></ref><ref id="B43"><citation citation-type="other"><article-title>BioPython</article-title><ext-link ext-link-type="uri" xlink:href="http://BioPython.org"/></citation></ref><ref id="B44"><citation citation-type="other"><article-title>BioJava</article-title><ext-link ext-link-type="uri" xlink:href="http://BioJava.org"/></citation></ref><ref id="B45"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Stajich</surname><given-names>J</given-names></name><name><surname>Block</surname><given-names>D</given-names></name><name><surname>Boulez</surname><given-names>K</given-names></name><name><surname>Brenner</surname><given-names>S</given-names></name><name><surname>Chervitz</surname><given-names>S</given-names></name><name><surname>Dagdigian</surname><given-names>C</given-names></name><name><surname>Fuellen</surname><given-names>C</given-names></name><name><surname>Gilbert</surname><given-names>J</given-names></name><name><surname>Korf</surname><given-names>I</given-names></name><name><surname>Lapp</surname><given-names>H</given-names></name><etal></etal></person-group><article-title>The BioPerl toolkit: Perl modules for the life sciences.</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><fpage>1611</fpage><lpage>1618</lpage><pub-id pub-id-type="pmid">12368254</pub-id><pub-id pub-id-type="doi">10.1101/gr.361602</pub-id></citation></ref><ref id="B46"><citation citation-type="other"><article-title>The Omega project for statistical computing</article-title><ext-link ext-link-type="uri" xlink:href="http://www.omegahat.org"/></citation></ref><ref id="B47"><citation citation-type="other"><article-title>BioMOBY</article-title><ext-link ext-link-type="uri" xlink:href="http://BioMOBY.org"/></citation></ref><ref id="B48"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Chiaretti</surname><given-names>S</given-names></name><name><surname>Li</surname><given-names>X</given-names></name><name><surname>Gentleman</surname><given-names>R</given-names></name><name><surname>Vitale</surname><given-names>A</given-names></name><name><surname>Vignetti</surname><given-names>M</given-names></name><name><surname>Mandelli</surname><given-names>F</given-names></name><name><surname>Ritz</surname><given-names>J</given-names></name><name><surname>Foa</surname><given-names>R</given-names></name></person-group><article-title>Gene expression profile of adult T-cell acute lymphocytic leukemia identifies distinct subsets of patients with different response to therapy and survival.</article-title><source>Blood</source><year>2004</year><volume>103</volume><fpage>2771</fpage><lpage>2778</lpage><pub-id pub-id-type="pmid">14684422</pub-id><pub-id pub-id-type="doi">10.1182/blood-2003-09-3243</pub-id></citation></ref></ref-list><sec sec-type="display-objects"><title>Figures and Tables</title><fig position="float" id="F1"><label>Figure 1</label><caption><p>Limma analysis of the ALL data. The leftmost numbers are row indices, ID is the Affymetrix HGU95av2 accession number, M is the log ratio of expression, A is the log average expression, and B is the log odds of differential expression.</p></caption><graphic xlink:href="gb-2004-5-10-r80-1"/></fig><fig position="float" id="F2"><label>Figure 2</label><caption><p>Heat map (produced by the Bioconductor function heatmap()) of the ALL leukemia data.</p></caption><graphic xlink:href="gb-2004-5-10-r80-2"/></fig><fig position="float" id="F3"><label>Figure 3</label><caption><p>Hypergeometric analysis of molecular function enrichment of genes selected in the analysis described in Figure 1.</p></caption><graphic xlink:href="gb-2004-5-10-r80-3"/></fig><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>Reasons for deciding to release software under an open-source license</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left">To encourage reproducibility, extension and general adherence to the scientific method</td></tr><tr><td align="left">To ensure that the code is open to public scrutiny and comment</td></tr><tr><td align="left">To provide full access to algorithms and their implementation</td></tr><tr><td align="left">To provide to users the ability to fix bugs without waiting for the developer, and to extend and improve the supplied software</td></tr><tr><td align="left">To encourage good scientific computing and statistical practice by exhibiting fully appropriate tools and instruction</td></tr><tr><td align="left">To provide a workbench of tools that allow researchers to explore and expand the methods used to analyze biological data</td></tr><tr><td align="left">To ensure that the international scientific community is the owner of the software tools needed to carry out research</td></tr><tr><td align="left">To lead and encourage commercial support and development of those tools that are successful</td></tr><tr><td align="left">To promote reproducible research by providing open and accessible tools with which to carry out that research</td></tr></tbody></table></table-wrap></sec></back></article>



