<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN" "archivearticle.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title>BMC Bioinformatics</journal-title><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">15527509</article-id><article-id pub-id-type="pmc">PMC544875</article-id><article-id pub-id-type="publisher-id">1471-2105-5-175</article-id><article-id pub-id-type="doi">10.1186/1471-2105-5-175</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>Computation of elementary modes: a unifying framework and the new binary approach</article-title></title-group><contrib-group><contrib id="A1" equal-contrib="yes" contrib-type="author"><name><surname>Gagneur</surname><given-names>Julien</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>julien.gagneur@cellzome.com</email></contrib><contrib id="A2" equal-contrib="yes" corresp="yes" contrib-type="author"><name><surname>Klamt</surname><given-names>Steffen</given-names></name><xref ref-type="aff" rid="I2">2</xref><email>klamt@mpi-magdeburg.mpg.de</email></contrib></contrib-group><aff id="I1"><label>1</label>Cellzome AG, Meyerhofstr. 1, 69117 Heidelberg, Germany</aff><aff id="I2"><label>2</label>Max Planck Institute for Dynamics of Complex Technical Systems, Sandtorstr. 1, D-39106 Magdeburg, Germany</aff><pub-date pub-type="collection"><year>2004</year></pub-date><pub-date pub-type="epub"><day>4</day><month>11</month><year>2004</year></pub-date><volume>5</volume><fpage>175</fpage><lpage>175</lpage><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/5/175"/><history><date date-type="received"><day>28</day><month>6</month><year>2004</year></date><date date-type="accepted"><day>4</day><month>11</month><year>2004</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2004 Gagneur and Klamt; licensee BioMed Central Ltd.</copyright-statement><copyright-year>2004</copyright-year><copyright-holder>Gagneur and Klamt; licensee BioMed Central Ltd.</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p><!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>
               Gagneur
               Julien
               
               julien.gagneur@cellzome.com
            </dc:author><dc:title>
            Computation of elementary modes: a unifying framework and the new binary approach
         </dc:title><dc:date>2004</dc:date><dcterms:bibliographicCitation>BMC Bioinformatics 5(1): 175-. (2004)</dcterms:bibliographicCitation><dc:identifier type="sici">1471-2105(2004)5:1&#x0003c;175&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1471-2105</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>--></license></permissions><abstract><sec><title>Background</title><p>Metabolic pathway analysis has been recognized as a central approach to the structural analysis of metabolic networks. The concept of elementary (flux) modes provides a rigorous formalism to describe and assess pathways and has proven to be valuable for many applications. However, computing elementary modes is a hard computational task. In recent years we assisted in a multiplication of algorithms dedicated to it. We require a summarizing point of view and a continued improvement of the current methods.</p></sec><sec><title>Results</title><p>We show that computing the set of elementary modes is equivalent to computing the set of extreme rays of a convex cone. This standard mathematical representation provides a unified framework that encompasses the most prominent algorithmic methods that compute elementary modes and allows a clear comparison between them. Taking lessons from this benchmark, we here introduce a new method, the binary approach, which computes the elementary modes as binary patterns of participating reactions from which the respective stoichiometric coefficients can be computed in a post-processing step. We implemented the binary approach in FluxAnalyzer 5.1, a software that is free for academics. The binary approach decreases the memory demand up to 96% without loss of speed giving the most efficient method available for computing elementary modes to date.</p></sec><sec><title>Conclusions</title><p>The equivalence between elementary modes and extreme ray computations offers opportunities for employing tools from polyhedral computation for metabolic pathway analysis. The new binary approach introduced herein was derived from this general theoretical framework and facilitates the computation of elementary modes in considerably larger networks.</p></sec></abstract></article-meta></front><body><sec><title>Background</title><p>The background section presents the importance of computing elementary modes for metabolic system analysis, its computational difficulties and the existence of various known algorithms. A theoretical section brings these algorithms into a unified framework. In a following section we introduce a new approach, called the binary approach. Although relying on concepts introduced in the theoretical section, this section gives enough practical details to be stand-alone for the implementer. Results obtained from example networks and a conclusion section close the article.</p><sec><title>Definition and benefits of elementary modes</title><p>We consider a metabolic network with <italic>m </italic>metabolites and <italic>q </italic>reactions. Reactions may involve further metabolites that are not considered as proper members of the system of study. The latter metabolites, considered to be buffered, are called <italic>external </italic>metabolites in opposition to the <italic>m </italic>metabolites within the boundary of the system, called <italic>internal </italic>metabolites. The stoichiometry matrix <bold>N </bold>is an <italic>m </italic>&#x000d7; <italic>q </italic>matrix whose element <italic>n</italic><sub><italic>ij </italic></sub>is the signed stoichiometric coefficient of metabolite <italic>i </italic>in reaction <italic>j </italic>with the following sign convention: negative for educts, positive for products. Some reactions, called irreversible reactions, are thermodynamically feasible in only one direction under the normal conditions of the system. Therefore, reaction indices are split into two sets: <italic>Irrev </italic>(the set of irreversible reaction indices) and <italic>Rev </italic>(the set of reversible reaction indices). A flux vector (flux distribution), denoted <bold>v</bold>, is a <italic>q</italic>-vector of the reaction space <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>q</italic></sup>, in which each element <italic>v</italic><sub><bold><italic>i </italic></bold></sub>describes the net rate of the <italic>i</italic><sup><bold>th </bold></sup>reaction. Sometimes we are interested only in the relative proportions of fluxes in a flux vector. In this sense, two flux vectors <bold>v </bold>and <bold>v' </bold>can be seen to be equivalent, denoted by <bold>v </bold>&#x02243; <bold>v'</bold>, if and only if there is some <italic>&#x003b1; </italic>&#x0003e; 0 such that <bold>v </bold>= <italic>&#x003b1; </italic>&#x000b7; <bold>v'</bold>.</p><p>Metabolism involves fast reactions and high turnover of substances compared to events of gene regulation. Therefore, it is often assumed that metabolite concentrations and reaction rates are equilibrated, thus constant, in the timescale of study. The metabolic system is then considered to be in quasi steady state. This assumption implies <bold>Nv </bold>= <bold>0</bold>. Thermodynamics impose the rate of each irreversible reaction to be nonnegative. Consequently the set of feasible flux vectors is restricted to</p><p><italic>P </italic>= {<bold>v </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>q </italic></sup>: <bold>Nv </bold>= <bold>0 </bold>and <italic>v</italic><sub><italic>i </italic></sub>&#x02265; 0, <italic>i </italic>&#x02208; <italic>Irrev</italic>} &#x000a0;&#x000a0;&#x000a0; (1)</p><p><italic>P </italic>is a set of <italic>q</italic>-vectors that obey a finite set of homogeneous linear equalities and inequalities, namely the |<italic>Irrev</italic>| inequalities defined by <italic>v</italic><sub><italic>i </italic></sub>&#x02265; 0, <italic>i </italic>&#x02208; <italic>Irrev </italic>and the <italic>m </italic>equalities defined by <bold>Nv </bold>= <bold>0</bold>. <italic>P </italic>is therefore &#x02013; by definition &#x02013; a convex polyhedral cone [<xref ref-type="bibr" rid="B1">1</xref>].</p><p>Metabolic pathway analysis [<xref ref-type="bibr" rid="B2">2</xref>-<xref ref-type="bibr" rid="B5">5</xref>] serves to describe the (infinite) set <italic>P </italic>of feasible states by providing a (finite) set of vectors that allow the generation of any vectors of <italic>P </italic>and are of fundamental importance for the overall capabilities of the metabolic system. One of this set is the so-called set of elementary (flux) modes (EMs). For a given flux vector <bold>v</bold>, we note <italic>R</italic>(<bold>v</bold>) = {<italic>i </italic>: <italic>v</italic><sub><italic>i </italic></sub>&#x02260; 0} the set of indices of the reactions participating in <bold>v</bold>. Hence, <italic>R</italic>(<bold>v</bold>) can be seen as the underlying pathway of <bold>v</bold>. By definition, a flux vector <bold>e </bold>is an <italic>elementary mode </italic>(EM) if and only if it fulfills the following three conditions [<xref ref-type="bibr" rid="B6">6</xref>,<xref ref-type="bibr" rid="B7">7</xref>]:</p><p><inline-graphic xlink:href="1471-2105-5-175-i1.gif"/></p><p>In other words, <bold>e </bold>is an EM if and only if it works at quasi steady state, is thermodynamically feasible and there is no other non-null flux vector (up to a scaling) that both satisfies these constraints and involves a proper subset of its participating reactions. Note that with this convention, reversible modes are here considered as two vectors of opposite directions.</p><p>The concept of elementary modes (and, with some restrictions, the very similar concept of extreme pathways [<xref ref-type="bibr" rid="B8">8</xref>-<xref ref-type="bibr" rid="B10">10</xref>]) has proven useful in many ways and has become an important theoretical tool for systems biology as well as for biotechnology and metabolic engineering (see review [<xref ref-type="bibr" rid="B5">5</xref>]). Because the metabolic network structure becomes now available at a genome-scale for an increasing number of microorganisms, this approach is well-suited to today's metabolic studies. Here, we give a short overview on the major applications and variants:</p><p>(1) <italic>Identification of pathways</italic>: The set of EMs comprises all admissible routes through the network and thus of "pathways" in the classical sense, i.e. of routes that convert some educts into some products [<xref ref-type="bibr" rid="B5">5</xref>].</p><p>(2) <italic>Network flexibility</italic>: The number of EMs is at least a rough measure of the network's flexibility (redundancy, structural robustness) to perform a certain function [<xref ref-type="bibr" rid="B11">11</xref>-<xref ref-type="bibr" rid="B13">13</xref>].</p><p>(3) <italic>Identification of all pathways with optimal yield</italic>: Consider the linear optimization problem, where all flux vectors with optimal product yield are to be identified, i.e. where the moles of products generated per mole of educts is maximal. Then, one or several of the EMs reach this optimum and any optimal flux vector is a convex combination of these optimal EMs [<xref ref-type="bibr" rid="B3">3</xref>,<xref ref-type="bibr" rid="B14">14</xref>].</p><p>(4) <italic>Importance of reactions</italic>: The importance or relevance of a reaction can be assessed by its participation frequency or/and flux values in the EMs.</p><p>(4a) <italic>Inference of viability of mutants</italic>: If a reaction is involved in all growth-related EMs its deletion can be predicted to be lethal, since all EMs would disappear [<xref ref-type="bibr" rid="B11">11</xref>].</p><p>(4b) A more quantitative measure of the importance of a reaction has been given by "control-effective fluxes" (CEFs, [<xref ref-type="bibr" rid="B11">11</xref>]). The CEFs take also the efficiency of each mode as well as the absolute flux values of the respective reaction in the EMs into account. CEFs have been used to predict transcript ratios [<xref ref-type="bibr" rid="B11">11</xref>,<xref ref-type="bibr" rid="B15">15</xref>].</p><p>(5) <italic>Reaction correlations</italic>: EMs can be used to analyze structural couplings between reactions, which might give hints for underlying regulatory circuits [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B16">16</xref>,<xref ref-type="bibr" rid="B17">17</xref>]. An extreme case is an enzyme (or reaction) subset (set of reactions which can operate only together) or a pair of mutually excluding reactions (two reactions never occurring together in any EM [<xref ref-type="bibr" rid="B10">10</xref>]).</p><p>(6) <italic>Detection of thermodynamically infeasible cycles</italic>: EMs representing internal cycles (without participation of external material or energy sources) are infeasible by laws of thermodynamics and thus reflect structural inconsistencies [<xref ref-type="bibr" rid="B18">18</xref>,<xref ref-type="bibr" rid="B19">19</xref>].</p><p>(7) The framework of pathway analysis also allows us to combine and to study stoichiometric constraints together with <italic>regulatory rules </italic>[<xref ref-type="bibr" rid="B20">20</xref>].</p><p>(8) <italic>Minimal cut sets: </italic>EMs allow for a computation of minimal cut sets that represent minimal cuts (deletion sets) in the network repressing certain metabolic functions [<xref ref-type="bibr" rid="B21">21</xref>].</p><p>(9) The <italic>&#x003b1;-spectrum </italic>has been introduced to quantify the involvement of extreme pathways in a particular flux distribution (e.g. from an experiment) [<xref ref-type="bibr" rid="B22">22</xref>]. Since the decomposition of a flux vector into extreme pathways is usually not unique, the <italic>&#x003b1;-spectrum </italic>specifies a range of possible weights for each extreme pathway. The same could be defined for EMs.</p></sec><sec><title>Computational limitations and algorithm variants</title><p>Due to the combinatorial explosion in the number of EMs in large networks [<xref ref-type="bibr" rid="B23">23</xref>], computing EMs is known to be a hard computational task, so far restricting elementary-mode analysis to medium-scale networks. Several algorithms (and derivations thereof) have been developed for computing EMs. The two most prominent ones are the algorithm elaborated by Schuster et al. [<xref ref-type="bibr" rid="B4">4</xref>] and the recently developed null-space approach by Wagner [<xref ref-type="bibr" rid="B24">24</xref>]. The latter considerably accelerated the computation speed and thus shifted the current limitation &#x02013; at least for a typical PC &#x02013; from computation time to the memory requirement.</p><p>Here we show that both the Schuster algorithm as well as that by Wagner can be embedded in a more general algorithmic framework stemming originally from computational geometry. These studies do not only give a summarizing point of view, they also lead to a crucial modification of the existing algorithms, decreasing the required memory for computing and storing EMs drastically.</p></sec></sec><sec><title>Results</title><sec><title>A unified framework</title><sec><title>Elementary modes as extreme rays in networks of irreversible reactions</title><p>In the particular case of a metabolic system with only irreversible reactions, the set of admissible reactions reads:</p><p><italic>P </italic>= {<bold>v </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>q </italic></sup>: <bold>Nv </bold>= <bold>0 </bold>and <bold>v </bold>&#x02265; <bold>0</bold>} &#x000a0;&#x000a0;&#x000a0; (3)</p><p>Compared with (1) <italic>P </italic>is in this case a particular, namely a <italic>pointed </italic>polyhedral cone (an example is depicted in Figure <xref ref-type="fig" rid="F1">1</xref>). This geometry can be intuitively understood, noting that there are certainly 'enough' intersecting half-spaces (given by the inequalities <bold>v </bold>&#x02265; <bold>0</bold>) to have this 'pointed' effect in <bold>0</bold>: <italic>P </italic>contains no real line (otherwise there coexist <bold>x </bold>and <bold>-x </bold>not null in <italic>P</italic>, a contradiction with the constraint <bold>v </bold>&#x02265; <bold>0</bold>). The figure even suggests that a pointed polyhedral cone can be either defined in an implicit way, by the set of constraints as we did until now, or in an explicit or generative way, by its 'edges', the so-called <italic>extreme rays </italic>(or <italic>generating vectors</italic>) that unambiguously define its boundaries. In the following, we show that elementary modes always correspond to extreme rays of a particular pointed cone as defined in (3) and that their computation therefore matches to the so-called extreme ray enumeration problem, i.e. the problem of enumerating all extreme rays of a pointed polyhedral cone defined by its constraints. An overview on general and current issues on extreme ray enumeration can be found in [<xref ref-type="bibr" rid="B25">25</xref>]. For the sake of consistency, we use this reference as a main source and adopt the same mathematical notations.</p><fig position="float" id="F1"><label>Figure 1</label><caption><p>A pointed polyhedral cone. Dashed lines represent virtual cuts of unbounded areas</p></caption><graphic xlink:href="1471-2105-5-175-1"/></fig><p>The pointed polyhedral cone is the central mathematical object throughout this work; therefore we shall introduce more precise definitions and results surrounding it.</p><p><italic>P </italic>is a <italic>pointed polyhedral cone </italic>of <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>d </italic></sup>if and only if <italic>P </italic>is defined by a full rank <italic>h </italic>&#x000d7; <italic>d </italic>matrix <bold>A </bold>(<italic>rank</italic>(<bold>A</bold>) = <italic>d</italic>) such that,</p><p><italic>P </italic>= <italic>P</italic>(<bold>A</bold>) = {<bold>x </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>d </italic></sup>: <bold>Ax </bold>&#x02265; <bold>0</bold>} &#x000a0;&#x000a0;&#x000a0; (4)</p><p>The <italic>h </italic>rows of the matrix <bold>A </bold>represent <italic>h </italic>linear inequalities, whereas the full rank mention imposes the "pointed" effect in <bold>0</bold>. Note that a pointed polyhedral cone is, in general, not restricted to be located completely in the positive orthant as in (3). For example, the cone considered in extreme-pathway analysis may have negative parts (namely for exchange reactions), however, by using a particular configuration it is ensured that the spanned cone is pointed [<xref ref-type="bibr" rid="B8">8</xref>].</p><p>Now we must characterize the extreme rays. A vector <bold>r </bold>is said to be a <italic>ray </italic>of <italic>P</italic>(<bold>A</bold>) if <bold>r </bold>&#x02260; <bold>0 </bold>and for all <italic>&#x003b1; </italic>&#x0003e; 0, <italic>&#x003b1; </italic>&#x000b7; <bold>r </bold>&#x02208; <italic>P</italic>(<bold>A</bold>). We identify two rays <bold>r </bold>and <bold>r' </bold>if there is some <italic>&#x003b1; </italic>&#x0003e; 0 such that <bold>r </bold>= <italic>&#x003b1; </italic>&#x000b7; <bold>r' </bold>and we denote <bold>r </bold>&#x02243; <bold>r'</bold>, analogous as introduced above for flux vectors. For any vector <bold>x </bold>in <italic>P</italic>(<bold>A</bold>), the <italic>zero set </italic>or active set <italic>Z</italic>(<bold>x</bold>) is the set of inequality indices satisfied by <bold>x </bold>with equality. Noting <bold>A</bold><sub><italic>i</italic>&#x02022; </sub>the <italic>i</italic><sup><bold>th </bold></sup>row of <bold>A</bold>, <italic>Z</italic>(<bold>x</bold>) = {<italic>i </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>x </bold>= 0}. Zero sets can be used to characterize extreme rays. For simplicity, we adopt in this document the following characteristic ([<xref ref-type="bibr" rid="B25">25</xref>] for example) as a working definition of extreme rays.</p><p>Definition 1: Extreme ray</p><p><italic>Let </italic><bold>r </bold><italic>be a ray of the pointed polyhedral cone </italic>P(<bold>A</bold>). <italic>The following statements are equivalent</italic>:</p><p>(<italic>a</italic>) <bold>r </bold><italic>is an extreme ray of </italic>P(<bold>A</bold>)</p><p>(b) if <bold>r' </bold>is a ray of P(<bold>A</bold>) with <italic>Z</italic>(<bold>r</bold>) &#x02286; <italic>Z</italic>(<bold>r'</bold>) then <bold>r' </bold>&#x02243; <bold>r</bold></p><p>Since <bold>A </bold>is full rank, <bold>0 </bold>is the unique vector that solves all constraints with equality. The extreme rays are those rays of <italic>P</italic>(<bold>A</bold>) that solve a maximum but not all constraints with equalities. This is expressed in (b) by requiring that no other ray in <italic>P</italic>(<bold>A</bold>) solves the same constraints plus additional ones with equalities. Note that in (b) <italic>Z</italic>(<bold>r</bold>) = <italic>Z</italic>(<bold>r'</bold>) consequently holds.</p><p>An important property of the extreme rays is that they form a finite set of generating vectors of the pointed cone ([<xref ref-type="bibr" rid="B25">25</xref>] for example): any vector of <italic>P</italic>(<bold>A</bold>) can be expressed as a non-negative linear combination of extreme rays, and the converse is true: all non-negative combinations of extreme rays lie in <italic>P</italic>(<bold>A</bold>). Moreover, the set of extreme rays is the unique minimal set of generating vectors of a pointed cone <italic>P</italic>(<bold>A</bold>) (up to positive scalings).</p><p>Lemma 1: EMs in networks of irreversible reactions</p><p>In a metabolic system where all reactions are irreversible, the EMs are exactly the extreme rays of <italic>P </italic>= {<bold>v </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>q </italic></sup>: <bold>Nv </bold>= <bold>0 </bold>and <bold>v </bold>&#x02265; <bold>0</bold>}.</p><p><bold>Proof</bold>: <italic>P </italic>is the solution set of the linear inequalities defined by <inline-graphic xlink:href="1471-2105-5-175-i2.gif"/> where <bold>I </bold>is the <italic>q </italic>&#x000d7; <italic>q </italic>identity matrix. Since it contains <bold>I</bold>, <bold>A </bold>is full rank and therefore <italic>P </italic>is a pointed polyhedral cone. All <bold>v </bold>&#x02208; <italic>P </italic>obey <bold>Nv </bold>= <bold>0</bold>, thus the 2<italic>m </italic>first inequalities defined by <bold>A </bold>hold with equality for all vectors in <italic>P </italic>and the inclusion condition of Definition 1 can be restricted to the last <italic>q </italic>inequalities, i.e. the inequalities corresponding to the reactions. Inclusion over the zero set can be equivalently seen as containment over the set of non-zeros in <bold>v</bold>, i.e. <italic>R</italic>(<bold>v</bold>). Consequently, <bold>e </bold>&#x02208; <italic>P </italic>is an extreme ray of <italic>P </italic>if and only if: for all <bold>e' </bold>&#x02208; <italic>P </italic>: <italic>R</italic>(<bold>e'</bold>) &#x02286; <italic>R</italic>(<bold>e</bold>) &#x021d2; <bold>e' </bold>= <bold>0 </bold>or <bold>e' </bold>&#x02243; <bold>e</bold>, i.e. if and only if <bold>e </bold>is elementary. Thus, all three conditions in (2) are fulfilled.</p></sec><sec><title>The general case</title><p>In the general case, some reactions of the metabolic system can be reversible. Consequently, <bold>A </bold>does not contain the identity matrix and <italic>P </italic>(as given in (1)) is not ensured to be a pointed polyhedral cone anymore [<xref ref-type="bibr" rid="B7">7</xref>]. Because they contain a linear subspace, non-pointed polyhedral cones cannot be represented properly by a unique set of generating vectors composed of extreme rays, albeit a set of generating vectors exists, sometimes also called convex basis [<xref ref-type="bibr" rid="B7">7</xref>]. One way to obtain a pointed polyhedral cone from (1) is to split up each reversible reaction into two opposite irreversible ones. Note that this operation is completely analogous to a transformation step used in linear programming to obtain a linear optimization problem in canonical form: free variables v are also split into two variables v<sup>+ </sup>and v<sup>- </sup>with v = v<sup>+ </sup>- v<sup>- </sup>and v<sup>+</sup>, v<sup>- </sup>&#x02265; 0 [<xref ref-type="bibr" rid="B26">26</xref>]. It has been noticed earlier that this virtual split does not change essentially the outcome: the EMs in the reconfigured network are practically equivalent to the EMs from the original network [<xref ref-type="bibr" rid="B10">10</xref>]. Here we prove and precisely characterize this result.</p><p>We first introduce some notations. We denote the original reaction network by <italic>S </italic>and the reconfigured network (with all reversible reactions split up) by <italic>S'</italic>. The reactions of <italic>S </italic>are indexed from 1 to <italic>q</italic>. Remember that <italic>Irrev </italic>denotes the set of irreversible reaction indices and <italic>Rev </italic>the reversible ones. An irreversible reaction indexed <italic>i </italic>gives rise to a reaction of <italic>S' </italic>indexed <italic>i</italic>. A reversible reaction indexed <italic>i </italic>gives rise to two opposite reactions of <italic>S' </italic>indexed by the pairs (<italic>i</italic>,+1) and (<italic>i</italic>,-1) for the forward and the backward respectively. The <italic>reconfiguration </italic>of a flux vector <bold>v </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>q </italic></sup>of <italic>S </italic>is a flux vector <bold>v' </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>Irrev </italic>&#x0222a; <italic>Rev </italic>&#x000d7; {-1;+1} </sup>of <italic>S' </italic>such that</p><p><inline-graphic xlink:href="1471-2105-5-175-i3.gif"/></p><p>Let <bold>N' </bold>be the stoichiometry matrix of <italic>S'</italic>. <bold>N' </bold>can be written as <bold>N' </bold>= [<bold>N </bold>- <bold>N</bold><sub><italic>Rev</italic></sub>] where <bold>N</bold><sub><italic>Rev </italic></sub>consists of all columns of <bold>N </bold>corresponding to reversible reactions. Note that if <bold>v </bold>is a flux vector of <italic>S </italic>and <bold>v' </bold>is its reconfiguration then <bold>Nv </bold>= <bold>N'v'</bold>.</p><p>If possible, i.e. if <bold>v' </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>Irrev </italic>&#x0222a; Re<italic>v </italic>&#x000d7; {-1;+1} </sup>is such that for any reversible reaction index <italic>i </italic>&#x02208; <italic>Rev </italic>at least one of the two coefficients <italic>v'</italic><sub>(<italic>i</italic>,+1) </sub>or <italic>v'</italic><sub>(<italic>i</italic>,-1) </sub>equals zero, then we define the reverse operation, called <italic>back-configuration </italic>that maps <bold>v' </bold>back to a flux vector <bold>v </bold>such that:</p><p><inline-graphic xlink:href="1471-2105-5-175-i4.gif"/></p><p>Theorem 1: EMs in original and in reconfigured networks</p><p>Let S be a metabolic system and S' its reconfiguration by splitting up reversible reactions. Then the set of EMs of S' is the union of</p><p>a) the set of reconfigured EMs of S</p><p>b) <italic>the set of two-cycles made of a forward and a backward reaction of </italic>S' <italic>derived from the same reversible reaction of S</italic></p><p><bold>Proof</bold>: see Methods.</p><p>Thus, the set of EMs of the original network is equivalent (up to the two-cycles) to the set of EMs in the reconfigured network and therefore can be seen as a reduced set of extreme rays of the pointed convex polyhedron as defined by:</p><p><italic>P </italic>= {<bold>v' </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>q </italic>+ |<italic>Rev</italic>| </sup>: <bold>N'v' </bold>= <bold>0 </bold>and <bold>v' </bold>&#x02265; <bold>0</bold>} &#x000a0;&#x000a0;&#x000a0; (5)</p><p>Hence, EMs computation can be derived from any extreme ray enumeration algorithm applied to the reconfigured network and followed by vector back-configuration and the elimination of meaningless vectors, namely the two-cycles.</p><p>Note that exactly the same procedure &#x02013; splitting reversible reactions into two irreversible ones &#x02013; was carried out also in the original work of Clarke [<xref ref-type="bibr" rid="B27">27</xref>] on stability analyses in stoichiometric networks. Clarke called the extreme rays of the corresponding cone (5) <italic>extreme currents</italic>. Thus, extreme currents are identical to the EMs in the reconfigured network and, hence, also (up to the 2-cycles) equivalent to the EMs from the original network</p></sec><sec><title>All known algorithms for computing EMs are variants of the Double Description Method</title><p>In the following we present a simple yet efficient algorithm for extreme ray enumeration, the so-called Double Description Method [<xref ref-type="bibr" rid="B28">28</xref>]. We show that it serves as a common framework to the most prominent EM computation methods. To reach this generality, we concentrate on mathematical operations regardless to the actual data-structures used in the implementation. Therefore we manipulate objects such as matrices, vectors or inequalities and leave their implementation into tableaus, arrays and so on to the next section.</p><p>A <italic>generating matrix </italic><bold>R </bold>of a pointed polyhedral cone <italic>P</italic>(<bold>A</bold>) is a matrix such that <italic>P</italic>(<bold>A</bold>) = {<bold>x </bold>&#x02208; <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup><italic>d </italic></sup>: <bold>x </bold>= <bold>R&#x003bb; </bold>for some <bold>&#x003bb; </bold>&#x02265; 0}. The pair (<bold>A</bold>,<bold>R</bold>) is called a <italic>Double Description pair</italic>, or DD pair. As mentioned above, the extreme rays form the unique set of minimal generating vectors of <italic>P</italic>(<bold>A</bold>) and thus, considered as set of <italic>d</italic>-vectors, the extreme rays of <italic>P</italic>(<bold>A</bold>) form the columns of a generating matrix <bold>R </bold>that is minimal in terms of number of columns. The pair (<bold>A</bold>,<bold>R</bold>) is then called a <italic>minimal DD pair</italic>.</p><p>The strategy of the Double Description Method is to iteratively build a minimal DD pair (<bold>A</bold><sub><italic>k</italic></sub>, <bold>R</bold><sub><italic>k</italic></sub>) from a minimal DD pair (<bold>A</bold><sub><italic>k </italic>- 1</sub>, <bold>R</bold><sub><italic>k </italic>- 1</sub>), where <bold>A</bold><sub><italic>k </italic></sub>is a submatrix of <bold>A </bold>made of <italic>k </italic>rows of <bold>A</bold>. At each step the columns of <bold>R</bold><sub><italic>k </italic></sub>are the extreme rays of <italic>P</italic>(<bold>A</bold><sub><italic>k</italic></sub>), the convex polyhedron defined by the linear inequalities <bold>A</bold><sub><italic>k</italic></sub>. The incremental step introduces a constraint of <bold>A </bold>that is not yet satisfied by all computed extreme rays. Some extreme rays are kept, some are discarded and new ones are generated. The generation of new extreme rays relies on the notion of <italic>adjacent extreme rays</italic>. Here again, for the sake of simplicity, we adopt a characteristic ([<xref ref-type="bibr" rid="B25">25</xref>] for example) as a working definition of adjacent extreme rays.</p><p>Definition 2: Adjacent extreme rays</p><p><italic>Let </italic><bold>r </bold><italic>and </italic><bold>r' </bold><italic>be distinct rays of the pointed polyhedral cone </italic>P(<bold>A</bold>). <italic>Then the following statements are equivalent</italic>:</p><p>(a) <bold>r </bold>and <bold>r' </bold>are adjacent extreme rays</p><p>(b) if <bold>r" </bold>is a ray of P(<bold>A</bold>) with <italic>Z</italic>(<bold>r</bold>) &#x02229; <italic>Z</italic>(<bold>r'</bold>) &#x02286; <italic>Z</italic>(<bold>r"</bold>) then either <bold>r" </bold>&#x02243; <bold>r </bold>or <bold>r" </bold>&#x02243; <bold>r'</bold></p><sec><title>Initialization</title><p>The initialization of the double description method must be done with a minimal DD pair. One possibility is the following. Since <italic>P </italic>is pointed, <bold>A </bold>has full rank and contains a nonsingular submatrix of order <italic>d </italic>denoted by <bold>A</bold><sub><italic>d</italic></sub>. Hence, (<bold>A</bold><sub><italic>d</italic></sub>, <bold>A</bold><sub><italic>d</italic></sub><sup>-1</sup>) is a minimal DD pair which works as initialization and leads directly to step <italic>k </italic>= <italic>d</italic>. Note that there is some freedom in choosing a submatrix <bold>A</bold><sub><italic>d </italic></sub>or some alternative starting minimal DD pair.</p></sec><sec><title>Incremental step</title><p>Assume (<bold>A</bold><sub><italic>k </italic>- 1</sub>, <bold>R</bold><sub><italic>k </italic>- 1</sub>) is a minimal DD pair and consider a <italic>k</italic><sup><bold>th </bold></sup>constraint defined by a not yet extracted row of <bold>A</bold>, denoted <bold>A</bold><sub><italic>i</italic>&#x02022;</sub>. Let <italic>J </italic>be the set of column indices of <bold>R</bold><sub><italic>k </italic>- 1 </sub>and <bold>r</bold><sup><italic>j</italic></sup>, <italic>j </italic>&#x02208; <italic>J</italic>, its column vectors, i.e. the extreme rays of <italic>P</italic>(<bold>A</bold><sub><italic>k </italic>- 1</sub>), the polyhedral cone of the previous iteration. <bold>A</bold><sub><italic>i</italic>&#x02022; </sub>splits <italic>J </italic>in three parts (Figure <xref ref-type="fig" rid="F2">2</xref>) whether <bold>r</bold><sup><italic>j </italic></sup>satisfies the constraint with strict inequality (<italic>positive </italic>ray), with equality (<italic>zero </italic>ray) or does not satisfy it (<italic>negative </italic>ray):</p><fig position="float" id="F2"><label>Figure 2</label><caption><p><bold>Double description incremental step</bold>. The scene is best visualized with a polytope; consider the cube pictured here as a <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup>3 </sup>projection of a <inline-graphic xlink:href="1471-2105-5-175-i50.gif"/><sup>4 </sup>polyhedral cone. Extreme rays from the previous iteration are {a,b,c,d,e,f,g,h} whose adjacencies are represented by edges. For the considered constraint, whose null space is the hyperplane depicted by the bold black border lines, b and f are positive rays, a and c are zero rays, d, e, g and h are negative rays. b, f, a and c satisfy the constraint and are kept for the next iteration. {f,e} and {f,g} are the only two pairs of adjacent positive/negative rays and only they give rise to new rays: i and j at the intersection of the hyperplane and the respective edges. The new polytope is then defined by its extreme rays: {a,b,c,f,i,j}.</p></caption><graphic xlink:href="1471-2105-5-175-2"/></fig><p><italic>J</italic><sup>+ </sup>= {<italic>j </italic>&#x02208; <italic>J </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>r</bold><sup><italic>j </italic></sup>&#x0003e; 0}</p><p><italic>J</italic><sup>0 </sup>= {<italic>j </italic>&#x02208; <italic>J </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>r</bold><sup><italic>j </italic></sup>= 0} &#x000a0;&#x000a0;&#x000a0; (6)</p><p><italic>J</italic><sup>- </sup>= {<italic>j </italic>&#x02208; <italic>J </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>r</bold><sup><italic>j </italic></sup>&#x0003c; 0}</p><p>Minimality of <bold>R</bold><sub><italic>k </italic></sub>is ensured in considering all positive rays, all zero rays and new rays obtained as combination of a positive and a negative ray that are adjacent to each other [<xref ref-type="bibr" rid="B25">25</xref>]. For convenience, we denote by <italic>Adj </italic>the index set of the newly generated rays in which every new ray is expressed by a pair of indices corresponding to the two adjacent rays combined. Hence, <bold>R</bold><sub><italic>k </italic></sub>is defined as the set of column vectors <bold>r</bold><sup><italic>j</italic></sup>, <italic>j </italic>&#x02208; <italic>J' </italic>with</p><p><inline-graphic xlink:href="1471-2105-5-175-i6.gif"/></p><p>The incremental step is repeated until <italic>k </italic>= <italic>h </italic>i.e. having treated all rows of the matrix <bold>A</bold>. The columns of the final matrix <bold>R</bold><sub><italic>m </italic></sub>are the extreme rays of <italic>P</italic>(<bold>A</bold>).</p></sec></sec><sec><title>Computing EMs</title><p>The Double Description Method together with Theorem 1 offers a framework for computing EMs. The only steps to include are a reconfiguration step that splits reversible reactions and builds the matrix <bold>A</bold>, and a post-processing step that gets rid of futile two-cycles and computes the back-configuration. The dimension of the space is given by the number of reactions in the reconfigured network: <italic>q</italic>' = <italic>q </italic>+ |<italic>Rev</italic>|. This results in the general algorithmic scheme as given in Table <xref ref-type="table" rid="T1">1</xref> (from here, all variables for the reconfigured network are written without prime):</p><table-wrap position="float" id="T1"><label>Table 1</label><caption><p>General double description method for EM computation.</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left"><bold>N </bold>&#x02190; reconfigured stoichiometry matrix [<bold>N </bold>- <bold>N</bold><sub><italic>Rev</italic></sub>]<break/><bold>A </bold>&#x02190; [<bold>N</bold><sup><italic>T </italic></sup>-<bold>N</bold><sup><italic>T </italic></sup><bold>I</bold>]<sup><italic>T</italic></sup></td><td align="center"><bold>Reconfiguration</bold></td></tr><tr><td align="left"><bold>A</bold><sub><italic>q </italic></sub>&#x02190; <italic>q </italic>independent rows of <bold>A</bold><break/><bold>R </bold>&#x02190; <bold>A</bold><sub><italic>q</italic></sub><sup>-1</sup></td><td align="center"><bold>Initialization</bold></td></tr><tr><td align="left">for each unprocessed row <bold>A</bold><sub><italic>i</italic>&#x02022; </sub>of <bold>A </bold>do<break/><italic>&#x000a0;&#x000a0;J</italic><sup>+ </sup>&#x02190; {<italic>j </italic>&#x02208; <italic>J </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>r</bold><sup><italic>j </italic></sup>&#x0003e; 0}<break/><italic>&#x000a0;&#x000a0;J</italic><sup>0 </sup>&#x02190; {<italic>j </italic>&#x02208; <italic>J </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>r</bold><sup><italic>j </italic></sup>= 0}<italic>&#x000a0;&#x000a0;&#x000a0;</italic><break/><italic>&#x000a0;J</italic><sup>- </sup>&#x02190; {<italic>j </italic>&#x02208; <italic>J </italic>: <bold>A</bold><sub><italic>i</italic>&#x02022;</sub><bold>r</bold><sup><italic>j </italic></sup>&#x0003c; 0}<italic>&#x000a0;</italic><break/><bold><italic>&#x000a0;&#x000a0;</italic>R' </bold>&#x02190; {<bold>r</bold><sup><italic>j </italic></sup>: <italic>j </italic>&#x02208; <italic>J</italic><sup>0 </sup>&#x0222a; <italic>J</italic><sup>+</sup>}<italic>&#x000a0;&#x000a0;&#x000a0;</italic><italic>&#x000a0;</italic><break/>For (<italic>j</italic><sup>+</sup>, <italic>j</italic><sup>-</sup>) &#x02208; <italic>J</italic><sup>+ </sup>&#x000d7; <italic>J</italic><sup>- </sup>do</td><td align="center"><bold>Processing of constraints in a given order</bold></td></tr><tr><td align="left">&#x02003;If <graphic xlink:href="1471-2105-5-175-i7.gif"/> and <graphic xlink:href="1471-2105-5-175-i8.gif"/> adjacent in <bold>R </bold>then</td><td align="center"><bold>Adjacency test</bold></td></tr><tr><td align="left"><graphic xlink:href="1471-2105-5-175-i9.gif"/><break/><italic>&#x000a0;&#x000a0;&#x000a0;&#x000a0;&#x000a0;</italic><italic>&#x000a0;&#x000a0;&#x000a0;</italic>end if<break/><italic>&#x000a0;</italic>end for<break/><bold><italic>&#x000a0;</italic>R </bold>&#x02190; <bold>R'</bold><break/>End for</td><td align="center"><bold>Gaussian combination step</bold></td></tr><tr><td align="left"><bold>R </bold>&#x02190; <bold>R \ </bold>{ futile two-cycles }<break/><bold>R </bold>&#x02190; back-configuration of <bold>R</bold></td><td align="center"><bold>Back-configuration</bold></td></tr></tbody></table></table-wrap><p>As mentioned in the introduction section, the two most efficient algorithms for computing EMs available are the recently introduced null-space approach [<xref ref-type="bibr" rid="B24">24</xref>] and the Schuster algorithm [<xref ref-type="bibr" rid="B6">6</xref>], that we call "canonical basis approach" (implemented, for example, in METATOOL [<xref ref-type="bibr" rid="B29">29</xref>] version 4.3 and <italic>FluxAnalyzer </italic>version 5.0 [<xref ref-type="bibr" rid="B30">30</xref>]). Both algorithms handle reversible reactions directly. A direct handling of reversible reactions, meaning without network reconfiguration, is feasible in each setting and has been described in the respective original articles. This requires adapted adjacency tests. However, it does not affect the overall strategy. For simplicity, we describe these algorithms with networks of irreversible reactions only (the issue of reversible reactions is discussed below). We are now able to see that the algorithms of Schuster and Wagner differ basically only in the chosen initialization for <bold>R</bold>.</p><sec><title>The canonical basis approach (Schuster approach; CBA)</title><p>The matrix <bold>I </bold>represents <italic>q </italic>independent rows extracted from <bold>A </bold>= [<bold>N</bold><sup><italic>T </italic></sup>-<bold>N</bold><sup><italic>T </italic></sup><bold>I</bold>]<sup><italic>T </italic></sup>and can thus be used for <bold>A</bold><sub><italic>q</italic></sub>. The matrix <bold>A</bold><sub><italic>q</italic></sub><sup>-1 </sup>= <bold>I</bold><sup>-1 </sup>= <bold>I </bold>gives the <italic>q </italic>extreme rays that obey to these <italic>q </italic>independent constraints and works as initialization of <bold>R</bold>.</p><p>The remaining constraints are 2<italic>m </italic>linear inequalities defined by <bold>Nr </bold>&#x02265; <bold>0 </bold>and -<bold>Nr </bold>&#x02265; <bold>0</bold>, i.e. <italic>m </italic>equalities: <bold>Nr </bold>= <bold>0</bold>. The processing of an equality constraint is done in a single pass by only keeping rays of <italic>J</italic><sup>0 </sup>instead of <italic>J</italic><sup>+ </sup>&#x0222a; <italic>J</italic><sup>0</sup>. This is achieved by replacing the line <bold>R' </bold>&#x02190; {<bold>r</bold><sup><italic>j </italic></sup>: <italic>j </italic>&#x02208; <italic>J</italic><sup>+ </sup>&#x0222a; <italic>J</italic><sup>0</sup>} with <bold>R' </bold>&#x02190; {<bold>r</bold><sup><italic>j </italic></sup>: <italic>j </italic>&#x02208; <italic>J</italic><sup>0</sup>} in the part "Processing of constraints in a given order" in Table <xref ref-type="table" rid="T1">1</xref>. Note that in the original Schuster algorithm the values of <bold>Ar</bold><sup><italic>j </italic></sup>(required for the Gaussian combination step) are explicitly stored throughout the algorithm (in the left-hand side of the tableau [<xref ref-type="bibr" rid="B4">4</xref>]) and adapted after each iteration.</p></sec><sec><title>The null space approach (Wagner approach; NSA)</title><p>The idea there is to initialize <bold>R </bold>by a well-defined kernel (or null-space) matrix <bold>K </bold>of <bold>N </bold>with a particular structure (the transposed <bold>K</bold><sup><italic>T </italic></sup>is in (reduced) row-echelon form):</p><p><inline-graphic xlink:href="1471-2105-5-175-i10.gif"/></p><p>which can be computed, for example, by the MATLAB command <italic>null</italic>(<italic>N</italic>,'<italic>r</italic>'). One can assume <bold>N </bold>to be of rank <italic>m</italic>, the opposite case being discussed below ("On redundancies and network compression"). This implies <inline-graphic xlink:href="1471-2105-5-175-i11.gif"/> to be of size <italic>m </italic>&#x000d7; (<italic>q </italic>- <italic>m</italic>) and the identity of size <italic>q </italic>- <italic>m</italic>. This structure is obtained by allowing a reordering of the rows of <bold>K</bold>, i.e. of the reaction indices. Without losing generality, one can assume that the reactions corresponding to the block <bold>I </bold>are indexed from 1 to <italic>q </italic>- <italic>m</italic>. Consider the (<italic>q </italic>+ <italic>m</italic>) &#x000d7; <italic>q </italic>matrix <inline-graphic xlink:href="1471-2105-5-175-i12.gif"/>. For all <bold>x </bold>in <italic>P</italic>(<bold>A</bold><sub><italic>q </italic>+ <italic>m</italic></sub>), there is some vector <bold>&#x003bb; </bold>&#x02265; <bold>0 </bold><inline-graphic xlink:href="1471-2105-5-175-i13.gif"/> such that <bold>x </bold>= <bold>K&#x003bb;</bold>. Reciprocally, for all <bold>&#x003bb; </bold>&#x02265; <bold>0</bold>, the vector <bold>x </bold>= <bold>K&#x003bb; </bold>lies in <italic>P</italic>(<bold>A</bold><sub><italic>q </italic>+ <italic>m</italic></sub>). Thus (<bold>A</bold><sub><italic>q </italic>+ <italic>m</italic></sub>, <bold>K</bold>) is a DD pair. Since <bold>K </bold>is a kernel matrix, its columns are independent vectors therefore (<bold>A</bold><sub><italic>q </italic>+ <italic>m</italic></sub>, <bold>K</bold>) is a minimal DD pair. <bold>K </bold>as defined in (8) works as initial value for <bold>R</bold>. Hence, the initialization in this setup delivers directly <italic>k </italic>= <italic>q </italic>+ <italic>m </italic>solved constraints.</p><p>The remaining constraints are <italic>m </italic>linear inequalities defined by <italic>r</italic><sub><italic>i </italic></sub>&#x02265; 0, <italic>i </italic>= <italic>q </italic>- <italic>m </italic>+ 1...<italic>q</italic>. The Gaussian elimination step simplifies too</p><p><inline-graphic xlink:href="1471-2105-5-175-i14.gif"/></p><p>The right hand-side is practically a positive combination of the two vectors <inline-graphic xlink:href="1471-2105-5-175-i7.gif"/> and <inline-graphic xlink:href="1471-2105-5-175-i8.gif"/>, because <inline-graphic xlink:href="1471-2105-5-175-i15.gif"/> is positive and <inline-graphic xlink:href="1471-2105-5-175-i16.gif"/> negative due to the definitions of <italic>J</italic><sup>+ </sup>and <italic>J</italic><sup>-</sup>.</p></sec><sec><title>Adjacency tests</title><p>Here we give explicitly the adjacency test in the case of reconfigured networks for each setup. Variants handling reversible reactions directly were introduced for CBA and NSA. They lead in general to more complex algorithmic steps for a little (at most 2-fold) memory gain.</p><p>The test is used when processing the constraint <italic>k </italic>+ 1 to check whether two extreme rays <bold>r </bold>and <bold>r' </bold>of the cone <italic>P</italic>(<bold>A</bold><sub><italic>k</italic></sub>) are adjacent. The adjacency test is based on Definition 2(b). Note that for a given extreme ray <bold>r </bold>of the cone <italic>P</italic>(<bold>A</bold><sub><italic>k</italic></sub>), the considered zero set <italic>Z</italic>(<bold>r</bold>) is defined over the <italic>k </italic>constraints <bold>A</bold><sub><italic>k</italic></sub>.</p><p><italic>CBA</italic>: As mentioned above, in a CBA setup, equality constraints are solved within a single iteration. After the <italic>l</italic>-th iteration step, <italic>k </italic>= <italic>q </italic>+ 2<italic>l </italic>constraints are processed, therefore <inline-graphic xlink:href="1471-2105-5-175-i17.gif"/>. The last 2<italic>l </italic>constraints are satisfied with equality for all computed rays. We denote by <italic>Z</italic><sub><italic>u</italic></sub>(<bold>v</bold>) the Zero set of a vector <bold>v </bold>over the <italic>u </italic>first constraints. Here, with <italic>u </italic>= <italic>q </italic>it matches to the set of non-participating reactions in <bold>v</bold>. The adjacency test is then equivalent to the search of a third extreme ray <bold>r" </bold>such that <italic>Z</italic><sub><italic>q</italic></sub>(<bold>r</bold>) &#x02229; <italic>Z</italic><sub><italic>q</italic></sub>(<bold>r'</bold>) &#x02286; <italic>Z</italic><sub><italic>q</italic></sub>(<bold>r"</bold>). If such an <bold>r" </bold>exists, then <bold>r </bold>and <bold>r' </bold>are not adjacent.</p><p><italic>NSA</italic>: After the <italic>l</italic>-th iteration step in an NSA setup, <italic>k </italic>= <italic>q </italic>+ <italic>m </italic>+ <italic>l </italic>constraints including <italic>p </italic>= <italic>q </italic>- <italic>m </italic>+ <italic>l </italic>sign constraints are processed. Thus <inline-graphic xlink:href="1471-2105-5-175-i18.gif"/>. The last 2<italic>m </italic>constraints are satisfied with equality for all computed rays. Therefore, the adjacency test is then equivalent to the search of a third extreme ray <bold>r" </bold>such that</p><p><italic>Z</italic><sub><italic>p</italic></sub>(<bold>r</bold>) &#x02229; <italic>Z</italic><sub><italic>p</italic></sub>(<bold>r'</bold>) &#x02286; <italic>Z</italic><sub><italic>p</italic></sub>(<bold>r"</bold>) &#x000a0;&#x000a0;&#x000a0; (10).</p><p>Thus, for NSA we only have to check the first <italic>p</italic>(<italic>q </italic>- <italic>m </italic>&#x02264; <italic>p </italic>&#x02264; <italic>q</italic>) elements of the rays, in contrast to all <italic>q </italic>elements for CBA. This is one reason behind the relative velocity of NSA compared to CBA.</p></sec></sec><sec><title>On redundancies and network compression</title><p>It is common practice to reduce the problem of extreme ray enumeration by restricting the input set to the set of irredundant constraints [<xref ref-type="bibr" rid="B25">25</xref>]. Although the general problem of extreme ray enumeration is non-polynomial, the reduction into irredundant constraints is equivalent to linear programming and therefore of polynomial complexity. To our best knowledge, this important pre-processing has never been spelled out explicitly in the context of EM computation. However some network simplification steps have been proposed earlier [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B30">30</xref>] that deeply relate to the notion of redundancy removal. These simplifications include three heuristics that reduce the size of the original stoichiometric matrix <bold>N </bold>and thus the input size of the problem: the detection of conservation relations, of strictly detailed balanced reactions and of enzyme subsets.</p><p>Conservation relations of metabolites are captured as linear dependencies between rows of the stoichiometry matrix <bold>N </bold>(thus, in the left null-space of <bold>N</bold>; [<xref ref-type="bibr" rid="B31">31</xref>]). This implies that some of the equality constraints in <bold>Nr </bold>= <bold>0 </bold>are linearly dependent. Satisfying a maximal linearly independent subset of these equations suffices to satisfy all equations. Therefore the problem can be reduced to <inline-graphic xlink:href="1471-2105-5-175-i19.gif"/>, where <inline-graphic xlink:href="1471-2105-5-175-i20.gif"/> is the reduced stoichiometry matrix. For example, in Figure <xref ref-type="fig" rid="F3">3a</xref>, metabolites B and C build up one conservation relation and thus one of these metabolites can be removed. Note that conservation relations need not to be considered explicitly in the null-space approach since their removal does not affect the computed null-space matrix.</p><fig position="float" id="F3"><label>Figure 3</label><caption><p><bold>Small example networks illustrating redundancies. </bold>For explanations see text.</p></caption><graphic xlink:href="1471-2105-5-175-3"/></fig><p>Conservation relations only consider redundancies among the equalities. The general approach handles also inequality constraints. Strictly detailed balanced reactions [<xref ref-type="bibr" rid="B32">32</xref>] and enzyme subsets [<xref ref-type="bibr" rid="B29">29</xref>] are particular cases of such redundancies. Strictly detailed balanced reactions are reactions with null flux at any steady-state. Many of them can be identified as null row vectors of <bold>K</bold>, the kernel matrix of <bold>N</bold>, and can be eliminated from the system. A non-trivial example is shown in Figure <xref ref-type="fig" rid="F3">3b</xref>, where R1 is strictly detailed balanced and would be detected by using the kernel matrix. However, there may be further reactions with a fixed zero-flux in steady state that cannot be identified by <bold>K</bold>. Some of those can be found by a simple analysis of <bold>N</bold>. For example, all the uni-directional reactions pointing into an internal sink (or emanating from a source) are certainly not participating in any steady-state flux (Figure <xref ref-type="fig" rid="F3">3c</xref>).</p><p>An enzyme subsets is defined as a group of reactions with relative constant flux ratio at steady state. Many of them can be identified as row vectors of <bold>K </bold>differing only in a scalar factor <italic>&#x003b1;</italic>. Reactions R1, R2 and R5 in Figure <xref ref-type="fig" rid="F3">3d</xref> would represent one enzyme subset. Assume one works on the reconfigured network and reactions R1 and R2 are members of the same enzyme subset. Thus, at steady state, we have for the respective rates <italic>r</italic><sub>1 </sub>= <italic>&#x003b1; </italic>&#x000b7; <italic>r</italic><sub>2</sub>. If <italic>&#x003b1; </italic>&#x0003e; 0, the constraints <italic>r</italic><sub>1 </sub>&#x02265; 0 and <italic>r</italic><sub>2 </sub>&#x02265; 0 are redundant, <italic>r</italic><sub>1 </sub>&#x02265; 0 being sufficient. In that case the practice is to lump both reactions into one lowering the number of reactions (and often also of the metabolites). If <italic>&#x003b1; </italic>&#x0003c; 0, the constraints <italic>r</italic><sub>1 </sub>&#x02265; 0 and <italic>r</italic><sub>2 </sub>&#x02265; 0 imply <italic>r</italic><sub>1 </sub>= <italic>r</italic><sub>2 </sub>= 0, hence, a special case of strictly detailed balanced reactions. In this case we say that the reactions contradict each other. Both reactions are not used and can be eliminated from the system as reactions R1 and R4 in Figure <xref ref-type="fig" rid="F3">3e</xref>.</p><p>We identified another kind of redundancies. We call a metabolite M <italic>uniquely produced </italic>(respectively <italic>consumed</italic>) if only one single reaction, say <italic>i</italic>, can produce (respectively consume) M for several consuming (respectively producing) it (see Figure <xref ref-type="fig" rid="F3">3f</xref>). In that case, balancing metabolite M at steady-state implies that <italic>r</italic><sub><italic>i </italic></sub>is always non-zero whenever the other reactions connected to M are active. We can therefore lump each reaction consuming (respectively producing) M with reaction <italic>i </italic>and remove metabolite M, decreasing the dimension of the problem further (see also the example in Figure <xref ref-type="fig" rid="F5">5</xref> which is discussed below). Note that some enzyme subsets and strictly detailed balanced reactions can be seen as special cases of this type of redundancy.</p><fig position="float" id="F5"><label>Figure 5</label><caption><p><bold>Example network</bold>. Full structure (a), compressed structure (b) and compressed structure with split reversible reaction R4c (c).</p></caption><graphic xlink:href="1471-2105-5-175-5"/></fig><p>Elimination of redundancies and network compression should be done in a pre-processing step leading to a compressed network structure. Thereby, it is important to detect and remove such redundancies <italic>iteratively </italic>until no further redundancy can be found. A MATLAB function <italic>compressSMat </italic>which removes all redundancies discussed above in an iterative fashion can be obtained from the corresponding author. After the computation of EMs, lumped reactions can be expanded to their single components.</p><p>There is a general approach for identifying redundancies in a set of linear constraints that uses linear programming, for example with the software <italic>redund </italic>distributed together with the software <italic>lrs </italic>[<xref ref-type="bibr" rid="B33">33</xref>]. This approach does not require any iterative process, but only identify redundant inequalities. Rows of <bold>A </bold>can be eliminated but no consequent column-wise reduction is done. Therefore, a simple redundancy removal is not as powerful as the accompanying network compressions presented above. The method however has the advantage to be systematic and might lead in the future to further network simplifications not yet identified.</p></sec></sec><sec><title>The binary approach</title><sec><title>General idea</title><p>Using the reconfigured network with only irreversible reactions we have shown that the most important algorithms for EM computation belong to the same general framework. However, the original algorithms from Schuster and Wagner operate directly on the original network without splitting reversible reactions. At a first look, this seems to be more efficient since the dimension (number of reactions) is lower, decreasing seemingly also the memory requirement and the costs for adjacency tests. However, using the reconfigured network <italic>S' </italic>offers great simplifications. First, as already mentioned in an earlier section, the adjacency tests are easier to handle. The most important advantage, however, is the following. For the CBA in <italic>S' </italic>it follows that all non-zero elements of a ray <bold>r</bold><sup><italic>k </italic></sup>will be retained if a new ray is obtained by combining <bold>r</bold><sup><italic>k </italic></sup>with another (adjacent) ray because only positive combinations of rays are performed. The same holds for the NSA with respect to the <italic>p </italic>already processed inequality (irreversibility) constraints. This is of great importance since the adjacency test requires the information on zero/non-zero places in the rays only.</p><p>We illustrate this idea for NSA because this approach turned out to be more efficient than CBA. We assume that <bold>N </bold>has full rank <italic>m</italic>, i.e. there is no conservation relation. In this section, all variables correspond again to the network with split reversible reactions.</p><p>As described above, for an initialization of <bold>R </bold>we use a kernel matrix <bold>K </bold>of <bold>N </bold>having form (8):</p><p><inline-graphic xlink:href="1471-2105-5-175-i21.gif"/></p><p>Note that we use here the transposed representation of the tableau compared to Wagner's original article [<xref ref-type="bibr" rid="B24">24</xref>]. Since by eq. (9) only positive column combinations are performed during the algorithm, no negative number can show up in the upper part (consisting of <italic>q </italic>- <italic>m </italic>rows (reactions)) during the next iterations. The first row to be processed now is <italic>p </italic>= <italic>q </italic>- <italic>m </italic>+ 1. Using the general algorithmic scheme provided above all rays with non-negative entries at row <italic>p </italic>are retained and all negative entries can be combined with positive ones that are adjacent to them to obtain a zero at position <italic>p</italic>.</p><p>Assuming that the procession of the <italic>p</italic>-th row leads to a collection of <italic>t </italic>rays, we have:</p><p><inline-graphic xlink:href="1471-2105-5-175-i22.gif"/></p><p>The upper part, <bold>R</bold><sub>1</sub>, contains the <italic>p </italic>processed rows which only contain non-negative values. Again, positive combinations of rays performed during the next iterations lead in the upper part to sums of non-negative numbers. Hence, it is easy to keep track of the zeroes in the upper part <bold>R</bold><sub>1 </sub>by the use of bit masks. After the procession of the <italic>p</italic>-th inequality constraint the <italic>p</italic>-th row (i.e. the first row of <bold>R</bold><sub>2</sub>) can be transformed to its binary representation and moved from <bold>R</bold><sub>2 </sub>to <bold>R</bold><sub>1</sub>. Using a binary representation for <bold>R</bold><sub>1 </sub>has many advantages:</p><p>(i) For the next row <italic>p </italic>+ 1 to be processed we have to perform the adjacency test for pairs of vectors <inline-graphic xlink:href="1471-2105-5-175-i7.gif"/>, <inline-graphic xlink:href="1471-2105-5-175-i8.gif"/>. This test only requires the first <italic>p </italic>elements of these rays (see (10)), hence, exactly the columns of <bold>R</bold><sub>1</sub>. Test (10) can then be written as a simple (and fast) bit operation. Two distinct vectors <inline-graphic xlink:href="1471-2105-5-175-i7.gif"/>, <inline-graphic xlink:href="1471-2105-5-175-i8.gif"/> are adjacent if and only if for all vectors <bold>r</bold><sup><italic>k </italic></sup>distinct from <inline-graphic xlink:href="1471-2105-5-175-i7.gif"/> and <inline-graphic xlink:href="1471-2105-5-175-i8.gif"/>, it holds:</p><p><inline-graphic xlink:href="1471-2105-5-175-i23.gif"/></p><p>(<inline-graphic xlink:href="1471-2105-5-175-i24.gif"/> taken from <bold>R</bold><sub>1</sub>; <bold>r</bold><sub>1...<italic>p </italic></sub>denotes the first <italic>p </italic>elements of <bold>r</bold>). Of course, the identical terms in the parentheses are computed only once.</p><p>(ii) Combination step of two adjacent rays (eq. (9)) reduces for the part in <bold>R</bold><sub>1 </sub>to a simple OR operation, which is already computed for (13). The other (real number) components of the two rays (contained in <bold>R</bold><sub>2</sub>) are combined as usual by eq. (9).</p><p>(iii) Bit operations as applied in <bold>R</bold><sub>1 </sub>are not only fast, they are numerically exact in contrast to operations on real numbers.</p><p>(iv) The binary representation requires much less memory. Taking a typical 64-bit floating-point variable, storing <bold>R</bold><sub>1 </sub>binary takes only 1.6 % of the memory needed for real numbers. Taking into account that in the worst case (all reactions reversible) the number of reactions in the reconfigured network is twice of that from the original one we still have a reduction in memory requirements of more than 96%. Note that <bold>R</bold><sub>2 </sub>is empty at the end of the algorithm, hence, all EMs are then stored binary.</p><p>Bitmap representations of EMs have already been used in earlier implementations for accelerating the adjacency (elementarity) tests. However, binary tableaus had then been stored and updated <italic>in parallel </italic>to the full (real number) tableau of EMs which is not necessary here.</p><p>After the whole processing, EMs (extreme rays) are obtained for the reconfigured network <italic>S' </italic>as binary vectors. Binary patterns of EMs are completely sufficient for many applications of EMs (see discussion). However, a well-known lemma ([<xref ref-type="bibr" rid="B25">25</xref>] for example) ensures that this information is also sufficient to retrieve the real values up to a positive scalar:</p><p>Lemma 2</p><p><italic>In a d-dimensional Euclidean space, let </italic><bold>r </bold><italic>be a ray of the pointed polyhedral cone </italic>P(<bold>A</bold>). <italic>The following statements are equivalent</italic>:</p><p>(a) <bold>r </bold><italic>is an extreme ray of </italic>P(<bold>A</bold>)</p><p>(b) <italic>rank</italic>(<bold>A</bold><sub><italic>Z</italic>(<italic>r</italic>)</sub>) = <italic>d </italic>- 1</p><p>Each obtained binary vector provides the zero set <italic>Z</italic><sub><bold><italic>q</italic></bold></sub>(<bold>e</bold>) and its complement the reaction set <italic>R</italic>(<bold>e</bold>) of an EM <bold>e </bold>in the reconfigured network <italic>S'</italic>. Lemma 2 says that the equation <inline-graphic xlink:href="1471-2105-5-175-i25.gif"/> and therefore</p><p><bold>N</bold><sub><italic>R</italic>(<bold>e</bold>)</sub><bold>e</bold><sub><italic>R</italic>(<bold>e</bold>) </sub>= <bold>0 </bold>&#x000a0;&#x000a0;&#x000a0; (14)</p><p>admit a one-dimensional solution space, i.e. the dimension of the null space of N<sub><italic>R</italic>(<bold>e</bold>) </sub>is 1. <bold>N</bold><sub><italic>R</italic>(<bold>e</bold>) </sub>denotes the <italic>m </italic>&#x000d7; |<italic>R</italic>(<bold>e</bold>)| sub-matrix of <bold>N </bold>containing all those reactions (columns) of <bold>N </bold>which are involved in <bold>e</bold>. Solving the homogeneous linear system (14) gives a vector that can be normalized and properly oriented for example by dividing it by the value on its first participating reaction (see the example below). The reconstruction process reflects the fact that an EM is &#x02013; up to a scalar &#x02013; determined by its participating reactions.</p><p>In a second post-processing step, we transform the (real number) EMs of <italic>S' </italic>back into their representation in the original network <italic>S </italic>by using the rules given before Theorem 1. Note that it is also possible to transform first the binary EMs from <italic>S' </italic>into the binary EMs of <italic>S </italic>and then to reconstruct the real numbers (by using eq. (14) for the stoichiometric matrix of the non-reconfigured network <italic>S</italic>; see pseudo-code). In both cases, if the original network had been compressed during pre-processing, the EMs can finally be expanded to their corresponding modes in the uncompressed network.</p></sec><sec><title>Pseudo-code of the binary (null-space) approach</title><p>Using the results of the previous sections we are now able to give a pseudo-code of the binary (null-space) approach (Figure <xref ref-type="fig" rid="F4">4</xref>). The code follows MATLAB style, which provides a convenient and comprehensible notation for operations on vectors and matrices. We use several native MATLAB routines (written in bold). For concision, we also make the use of some other routines (indicated in italic). The code of the latter routines is not given here explicitly but their names and accompanying comments should allow the reader to implement them. For readers not familiar with MATLAB notation we give in the Methods section some basic explanations which should suffice for understanding the pseudo-code.</p><fig position="float" id="F4"><label>Figure 4</label><caption><p>Pseudo-code: Core algorithm for computing elementary modes with the binary approach.</p></caption><graphic xlink:href="1471-2105-5-175-4"/></fig><p>Note that the pseudo-code in Figure <xref ref-type="fig" rid="F4">4</xref> is not given in its computationally most efficient form. It should just present the basic structure of the algorithm. There are two important issues in the algorithm we still have to discuss.</p><sec><title>Minimal number of zeros in extreme rays (maximal pathway length)</title><p>In the null-space approach, the <italic>m </italic>equality constraints are always solved for each ray during the procession of sign constraints. Since any ray satisfies by Lemma 2 at least a total of <italic>q </italic>- 1 constraints, this implies that at least <italic>q</italic>-1-<italic>m </italic>sign restrictions are solved by equality. Hence each ray contains at least <italic>q</italic>-1-<italic>m </italic>zero-places. This fact can be used as a shortcut when checking the adjacency of two rays (see pseudo-code). At the end of the algorithm, it follows that the maximal pathway length |<italic>R</italic>(<bold>e</bold>)|<sub>max</sub>, that is the maximal number of involved reactions in an EM, reads (cf. [<xref ref-type="bibr" rid="B7">7</xref>]):</p><p>|<italic>R</italic>(<bold>e</bold>)|<sub>max </sub>= <italic>q </italic>- (<italic>q </italic>- <italic>m </italic>- 1) = <italic>m </italic>+ 1 &#x000a0;&#x000a0;&#x000a0; (15)</p></sec><sec><title>Initialization of R</title><p>As for the non-reconfigured network, the initialization of <bold>R </bold>for the reconfigured network can be done with a null space matrix <bold>K' </bold>of <bold>N' </bold>having the special structure (8). Several of such kernel matrices may exist. We are interested in such a one that contains as many zeros as possible because the number of zeros in the starting tableau <bold>R </bold>has great impact on the number of ray combinations to be performed. For this purpose, it can be exploited that very sparse vectors of the null space of <bold>N' </bold>(not contained in the null space of <bold>N</bold>) are known, namely the two-cycles emerging by splitting up reversible reactions. We detail in Method section a technique that incorporates as many two-cycles as possible into <bold>K </bold>to construct <bold>K'</bold>.</p></sec></sec><sec><title>Simple example</title><p>This section is devoted to illustrate our binary approach for computing elementary modes. Figure <xref ref-type="fig" rid="F5">5(a)</xref> shows a simple example network consisting of four metabolites (A,B,C,D) and 7 reactions (R1...R7), whereof R5 is reversible. The stoichiometric matrix <bold>N </bold>of this network reads accordingly:</p><p><inline-graphic xlink:href="1471-2105-5-175-i26.gif"/></p><p>Using our rules for removing redundancies, this network can be compressed as depicted in Figure <xref ref-type="fig" rid="F5">5(b)</xref>. Metabolite A is uniquely produced, hence, R1 and R2 can be combined to R1c and reactions R1 and R3 are lumped into R2c. R3c and R4c correspond to the original reactions R4 and R5, respectively. Finally, R6 and R7 are enzyme subsets and are combined to R5c. Metabolites A and D can be removed, since they do not occur in any reaction anymore. Thus, the network dimension could be reduced by two metabolites and two reactions. The stoichiometric matrix <bold>N</bold><sub><italic>C </italic></sub>of the compressed system reads:</p><p><inline-graphic xlink:href="1471-2105-5-175-i27.gif"/></p><p>From this compressed network, we can compute a null space matrix having structure (8), here even without permuting rows (reactions):</p><p><inline-graphic xlink:href="1471-2105-5-175-i28.gif"/></p><p><bold>K</bold><sub><italic>C </italic></sub>would be the starting tableau in the original null-space approach. Applying our binary approach we have now to split the (only) reversible reaction R4c in the compressed network (Figure <xref ref-type="fig" rid="F5">5(c)</xref>). This results in the stoichiometric matrix <bold>N</bold><sub><bold>C</bold></sub>', where R4c<sub>b </sub>denotes the additionally introduced column of the backward direction of R4c:</p><p><inline-graphic xlink:href="1471-2105-5-175-i29.gif"/></p><p>Now we need to determine a null space matrix <bold>K</bold><sub><italic>C</italic></sub>' of <bold>N</bold><sub><italic>C</italic></sub>', if possible in the sparse form as in eq. (M1) (Methods section). <bold>K</bold><sub><italic>C </italic></sub>&#x02013; as given in (18) &#x02013; contains only irreversible reactions in the identity sub-matrix. Therefore, without further rearrangements, we can already use it to construct <bold>K</bold><sub><italic>C</italic></sub>' as described in the Methods section. We introduce an additional row in the identity sub-matrix of <bold>K</bold><sub><italic>C </italic></sub>(corresponding to R4c<sub>b</sub>) and an additional column representing the two-cycle from the split reversible reaction R4c:</p><p><inline-graphic xlink:href="1471-2105-5-175-i30.gif"/></p><p><bold>K</bold><sub><italic>C</italic></sub>' is now a proper initialization for the <bold>R </bold>tableau according to (11). The first four rows (in the identity sub-matrix) can be seen as already completed, we therefore denote the starting tableau as <bold>R</bold><sup>4</sup>. According to (12) we can divide <bold>R</bold><sup>4 </sup>into a binary (a non-zero entry is demarked by "&#x000d7;") and unprocessed real number part:</p><p><inline-graphic xlink:href="1471-2105-5-175-i31.gif"/></p><p>We proceed now with the 5-th row (R4c). All columns with non-negative entries in R4c are retained (columns 1 and 4). Columns 2 and 3 have a negative entry at position R4c and are therefore combined with 1 and 4 to obtain a zero at position R4c. In the binary sub-tableau, the combination step is a simple OR operation. Thereby, using the obtained binary patterns, the adjacency test (13) must be performed for each pair of combined columns. Here, all 4 possible pairs are adjacent. Accordingly, after completing row 5, tableau <bold>R</bold><sup>5 </sup>has 6 columns and reads:</p><p><inline-graphic xlink:href="1471-2105-5-175-i32.gif"/></p><p>Now we have already reached the last iteration step where R5c &#x02013; the last row in real number format &#x02013; is processed. Columns 1&#x02013;5 are retained and column 6 is combined with columns 1,3 and 5. However, the column pairs (1,6) and (3,6) are not pairs of adjacent rays. This can be detected in two alternative ways. The usual way is that both column pairs violate condition (13) because of column 4. The second and quicker way is to observe that the minimal number of zeros in this network is 3 (<italic>q'</italic>-<italic>m</italic>-1 = 6-2-1) and that their respective combinations would give columns with only 2 zeros. These combinations are therefore not included in the tableau. We obtain:</p><p><inline-graphic xlink:href="1471-2105-5-175-i33.gif"/></p><p>Tableau <bold>R</bold><sup>6 </sup>is the binary representation of the EMs (extreme rays) from the split compressed network. Now, the post-processing begins. First, we remove the spurious 2-cycle (second column in <bold>R</bold><sup>6</sup>) raised by splitting R4c. Then, rows R4c and R4c<sub>b </sub>are combined by an OR operation and row R4c<sub>b </sub>is dropped. Note, if a completely reversible elementary mode exists in the non-split network, it would lead to two EMs &#x02013; one for each direction &#x02013; in the split network. In such a case, either both are kept or only one, then marked as reversible EM. We have now obtained the 5 EMs of the compressed network as binary vectors:</p><p><inline-graphic xlink:href="1471-2105-5-175-i34.gif"/></p><p>Here, it is easy to reconstruct the real numbers of the EMs from their binary patterns. For illustrating the general case, we reconstruct the first mode <bold>e</bold><sup>1 </sup>using eq. (14):</p><p><inline-graphic xlink:href="1471-2105-5-175-i35.gif"/></p><p>The dimension of the null space of <inline-graphic xlink:href="1471-2105-5-175-i36.gif"/>, hence of the solution space of eq. (25) is 1 (as it is for all EMs). A scalable solution vector is (2,1,1)<sup>T</sup>, normalizing to the first component yields the unique solution (1,0.5,0.5)<sup>T</sup>. Thus, the first EM in the compressed network is <bold>e</bold><sup>1 </sup>= (1,0,0,0.5,0.5)<sup><italic>T</italic></sup>. Reminding that we lumped the original reactions R1 and R2 into R1c and R6 and R7 into R5c, we can finally reconstruct the original elementary mode from the uncompressed network, that is <italic>R</italic>1 + <italic>R</italic>2 + 0.5 &#x000d7; <italic>R</italic>5 + 0.5 &#x000d7; <italic>R</italic>6 + 0.5 &#x000d7; <italic>R</italic>7.</p></sec><sec><title>Results from real networks</title><p>We implemented the binary null-space approach (binary NSA) in MATLAB (Mathworks Inc.) and incorporated it into the <italic>FluxAnalyzer </italic>[<xref ref-type="bibr" rid="B30">30</xref>,<xref ref-type="bibr" rid="B34">34</xref>]. The function includes a pre-processing step where the network is compressed as described. Some sub-routines of the algorithm are performed by compiled C-code (via MATLAB MEX interface), since this proved to accelerate the implementation drastically. In order to check the capabilities of our algorithm we computed the elementary modes in realistic and large metabolic networks. The three networks (S1-S3) considered here are variants from a model of the central metabolism of <italic>Escherichia coli </italic>investigated originally in [<xref ref-type="bibr" rid="B11">11</xref>,<xref ref-type="bibr" rid="B23">23</xref>]. For considering networks with different complexities we inserted an increasing number of substrate uptake or/and product excretion (pseudo) reactions, which increase the number of EMs much faster than the insertion of internal reactions. For a (rough) comparison with the original NSA we used the program <italic>coverN </italic>(developed by Clemens Wagner and co-workers; available upon request from <email>clemens.wagner@pki.unibe.ch</email>, which is also implemented in MATLAB and uses external C-files for some sub-routines. The original as well as the binary CBA algorithm proved to be slower than both methods of NSA (not shown).</p><p>Table <xref ref-type="table" rid="T2">2</xref> summarizes the computations. As a first result, it can be noted that redundancy removal and network compression during pre-processing results in much smaller networks. Note that the dimensions of the compressed networks of S1 and S2 are even lower than given in [<xref ref-type="bibr" rid="B23">23</xref>] due to the additional removal of uniquely produced/consumed metabolites. A lower number of reactions reduces the dimension of the null-space (hence, the number of iterations) and, in particular, the effort for adjacency tests. Generally, the proportion of the pre-processing on the overall computation time is negligible.</p><table-wrap position="float" id="T2"><label>Table 2</label><caption><p>Computations of elementary modes in a realistic metabolic network (central metabolism of <italic>Escherichia coli</italic>). Computations were performed on a typical PC with AMD Athlon XP 3000 + CPU and 1 GB RAM. Abbreviations: Form = formiate, Ac = acetate, Glc = glucose, Succ = succinate, Asp = aspartate, Glyc = glycerol, Eth = ethanol, Lac = lactate, CO2 = carbon dioxide.</p></caption><table frame="hsides" rules="groups"><thead><tr><td></td><td align="center" colspan="2"><bold>S1</bold></td><td align="center" colspan="2"><bold>S2</bold></td><td align="center" colspan="2"><bold>S3</bold></td></tr></thead><tbody><tr><td align="left"><bold>substrates</bold></td><td align="left" colspan="2">Glc</td><td align="left" colspan="2">Glc, <bold>Succ</bold>, <bold>Glyc</bold>, <bold>Ac</bold></td><td align="left" colspan="2">Glc, Succ, Glyc, Ac, <bold>Asp</bold></td></tr><tr><td align="left"><bold>products</bold></td><td align="left" colspan="2">Ac, Form, Eth, Lac, CO2</td><td align="left" colspan="2">Ac, Form, Eth, Lac, CO2</td><td align="left" colspan="2">Ac, Form, Eth, Lac, CO2, <bold>Succ</bold></td></tr><tr><td align="left"><bold>#reactions (q)</bold><break/><bold># metabolites (m)</bold></td><td align="left" colspan="2">106 (28 reversible) <break/>89</td><td align="left" colspan="2">110 (28 reversible) 89</td><td align="left" colspan="2">112 (28 reversible) <break/>89</td></tr><tr><td align="left"><bold>compressed network:</bold><break/><bold># reactions </bold><break/><bold># metabolites</bold></td><td align="left" colspan="2"><break/>42 (17 reversible)<break/>25</td><td align="left" colspan="2"><break/>47 (17 reversible)<break/>26</td><td align="left" colspan="2"><break/>51 (17 reversible)<break/>28</td></tr><tr><td align="left"><bold>final number of elementary modes</bold></td><td align="left" colspan="2">27,100</td><td align="left" colspan="2">507,632</td><td align="left" colspan="2">2,450,787</td></tr><tr><td></td><td align="left"><bold>binary NSA</bold></td><td align="left"><bold>NSA</bold></td><td align="left"><bold>binary NSA</bold></td><td align="left"><bold>NSA</bold></td><td align="left"><bold>binary NSA</bold></td><td align="left"><bold>NSA</bold></td></tr><tr><td align="left"><bold>computation time</bold></td><td align="left">0.16 min (9.63 sec)</td><td align="left">0.54 min (32.20 sec)</td><td align="left">51.20 min</td><td align="left">116.77 min</td><td align="left">1546 min (25.78 h)</td><td align="left">not finished</td></tr><tr><td align="left"><bold>back transformation</bold></td><td align="left">0.13 min (7.97 sec)</td><td></td><td align="left">2.57 min</td><td></td><td align="left">13 min</td><td></td></tr><tr><td align="left"><bold>total computation time</bold></td><td align="left">0.29 min (17.60 sec)</td><td align="left">0.54 min (32.20 sec)</td><td align="left">53.77 min</td><td align="left">116.77 min</td><td align="left">1559 min (25.98 h)</td><td></td></tr></tbody></table></table-wrap><p>Comparing the required computation times, the binary NSA seems to be slightly faster than the original NSA. This observation should not be considered as a general result, since we cannot exclude that there are different potentials in optimizing the source code of <italic>coverN </italic>and in <italic>FluxAnalyzer</italic>, respectively. Besides, different row orders in the starting tableau can generally result in different computation times. However, it seems that the original and the binary NSA are comparable with respect to computation time. The adjacency tests in the binary null-space approach need to consider more elements (due to the split of reversible reactions) but are simpler to perform because preliminary modes from a previous iteration cannot lose their elementary property. Note also that implementing the full algorithm in C (and not only parts of it as in <italic>coverN </italic>and <italic>FluxAnalyzer</italic>) might further accelerate the computation considerably.</p><p>Using a special null space matrix <bold>K' </bold>as initialization of <bold>R </bold>(as explained in the Methods section) contributes considerably to a reduced computational effort. We can estimate this by the total sum <inline-graphic xlink:href="1471-2105-5-175-i37.gif"/> over the number of candidates <italic>P</italic><sub><italic>i </italic></sub>occurring in the tableau before iteration <italic>i</italic>. In S1, for example, <inline-graphic xlink:href="1471-2105-5-175-i38.gif"/>. Computing instead an arbitrary null-space matrix <bold>K' </bold>for <bold>N' </bold>(e.g. via MATLAB <italic>null </italic>command) results in a more dense initialization for <bold>R </bold>and the naive initialization would lead to <inline-graphic xlink:href="1471-2105-5-175-i39.gif"/>. The larger numbers of candidates increase the costs for adjacency tests and accordingly the running time drastically. This underlines that the success of the null-space approach (in its original or binary form) depends strongly on the initially chosen null space matrix.</p><p>Generally, computing the stoichiometric coefficients of the EMs from their binary patterns is in larger networks in low proportion to the overall computation time (S3: ca. 0.8%).</p><p>Whereas the computational demands seem to be comparable for both null-space approaches, the memory requirements for the binary NSA are much lower, in particular during the last iterations. For this reason, the 2.45 millions of EMs from network S3 could be computed on a typical PC, whereas the original NSA ends in the 26-th iteration step (from a total of 28) due to memory overflow.</p></sec></sec></sec><sec><title>Discussion</title><p>Elementary modes are smallest functional sub-networks, which can be interpreted geometrically as extreme rays from a pointed convex cone (corresponding to the network with split reversible reactions). The computation of extreme rays has been intensively studied by the polyhedral computation community and we think that the metabolic community can benefit from it. We shall also mention another abstraction of elementary modes within the framework of <italic>matroid </italic>theory [<xref ref-type="bibr" rid="B35">35</xref>]. In an <italic>oriented vector matroid</italic>, the elementary modes correspond to the <italic>positive circuits </italic>(or <italic>positive cycles</italic>), which are minimal dependent sets. In fact, an elementary mode is a minimal linearly dependent set of the column vectors of the stoichiometric matrix (in the reconfigured network with only non-negative coefficients). This has been mentioned only rarely so far [<xref ref-type="bibr" rid="B36">36</xref>]. Matroid theory could be a source for new theoretical investigations on elementary modes and could lead to further improvements in the computation procedure as well as to new applications in the sense of metabolic pathway analysis.</p><p>Adjacent extreme rays can also be detected by an algebraic characterization that completes Definition 2 [<xref ref-type="bibr" rid="B25">25</xref>]:</p><p>(<italic>c</italic>) <bold>r </bold><italic>and </italic><bold>r' </bold><italic>are extreme rays and the rank of the matrix </italic>A<sub><italic>Z</italic>(<bold>r</bold>) &#x02229; <italic>Z</italic>(<bold>r'</bold>) </sub><italic>is </italic>d-2</p><p>In practical cases the characterization of adjacency is mostly computed in its combinatorial form than its algebraic one [<xref ref-type="bibr" rid="B25">25</xref>]. However, improvements could be done by using both characterizations. In fact, the test on EM length done before the actual adjacency test in our MATLAB pseudo-code is a consequence of the algebraic test. A striking feature of the algebraic test is that it only requires access to the two rays tested for adjacency (<bold>r </bold>and <bold>r'</bold>) and to the fixed size matrix <bold>A</bold>, in practice to the stoichiometry matrix. In comparison, the combinatorial test implies a loop over all other rays (<bold>r"</bold>). Therefore, the algebraic test could be suited for distributed computing.</p><p>Some theoretical issues of the combinatorial complexity of EMs were discussed in [<xref ref-type="bibr" rid="B23">23</xref>]. An upper bound <italic>B </italic>for the number of EMs is (reversible modes are counted only once):</p><p><inline-graphic xlink:href="1471-2105-5-175-i40.gif"/></p><p>Assuming that no conservation relations occur in the stoichiometric matrix, we obtain:</p><p><inline-graphic xlink:href="1471-2105-5-175-i41.gif"/></p><p>Note that <italic>q </italic>and <italic>m </italic>should be taken from the non-split, compressed network to obtain the lowest upper bound. In larger, realistic networks, even if compressed, the values for <italic>B </italic>explode quickly. Fortunately, the actual number of modes in real networks proved to be much smaller than the boundary (cf. <italic>B </italic>&#x02248; 2.54 &#x000b7; 10<sup>11 </sup>for S1 in Table <xref ref-type="table" rid="T2">2</xref>), although it grows also exponentially. One reason is that many routes are not admissible due to violation of the sign restrictions. Another reason is the low connectivity of many metabolites leading to sparse stoichiometric matrices.</p><p>A third reason is related to short pathway length. The upper bound reflects the case where all EMs have maximal pathway length |<italic>R</italic>(<bold>e</bold>)|<sub>max </sub>which is, by eq. (15), <italic>m </italic>+ 1. However, many EMs, if not all, have a lower length immediately reducing the possible number of modes [<xref ref-type="bibr" rid="B23">23</xref>]. The pathway length distribution of the <italic>E. coli </italic>modes on glucose (network S1) is shown in Figure <xref ref-type="fig" rid="F6">6</xref>. The maximal length of an EM in the uncompressed network is <italic>m </italic>+ 1 = 89 + 1 = 90. Modes that are not involved in biomass synthesis, in particular, are much smaller. In terms of linear algebra this means that there exist vector sets <italic>W </italic>containing fewer than <italic>m </italic>+ 1 column vectors of <bold>N </bold>that are linearly dependent. In polyhedral computation this phenomenon is known as <italic>degeneracy</italic>. Generally, degenerate systems may cause annoying difficulties and must be handled often differently to non-degenerate systems, albeit they reduce here the number of modes. The algorithms related to EM computation may be, in general, especially suited for computing extreme rays in such strongly degenerate systems, whereas other programs may be better suited for only weakly degenerate problems. For example, the software <italic>lrs </italic>[<xref ref-type="bibr" rid="B33">33</xref>] implements the so-called reverse search enumeration algorithm [<xref ref-type="bibr" rid="B37">37</xref>] that is polynomial for non-degenerate cases. Note that the new binary approach as introduced herein can easily be adapted for computing extreme rays of any pointed cone as given in eq. (4) and may therefore improve the performance of extreme ray computation in many other applications.</p><fig position="float" id="F6"><label>Figure 6</label><caption><p><bold>Pathway length distribution in elementary modes of <italic>E. coli. </italic></bold>(Substrate: glucose; network S1 in Table 2).</p></caption><graphic xlink:href="1471-2105-5-175-6"/></fig><p>Albeit the general framework was formulated long time ago, the explicit introduction of the null-space approach was an important mile-stone in accelerating the computation of EMs. The binary null-space approach as introduced herein increases the efficiency of this approach also with respect to the memory requirements and enables now to compute EMs in networks significant larger as those investigated before. A simple computation gives the number of about 85 millions of EMs in a network of 100 (compressed) reactions that can be stored in 1 GB RAM (cf. compressed and reconfigured S3: <italic>q' </italic>= 51 + 17 = 68). Of course, only a fraction of this amount can be stored during the algorithm due to other (partially large) temporary variables. Besides, reactions that are not yet processed are still stored as real numbers. The amount <italic>M </italic>of memory required for storing <italic>E </italic>modes after the procession of <italic>p </italic>reactions (stored binary) is (assuming 64-bit real numbers)</p><p><italic>M </italic>= <italic>E </italic>&#x000b7; (<italic>p </italic>+ 64 &#x000b7; (<italic>q </italic>- <italic>p</italic>)). &#x000a0;&#x000a0;&#x000a0; (28)</p><p>It depends on the evolution of the number of EMs during the algorithm where the maximal memory demand occurs. Generally, much larger networks can now be treated.</p></sec><sec><title>Conclusions</title><p>The four main results of this work are: (i) showing the equivalence between extreme rays and elementary modes, (ii) showing that algorithms for computing elementary modes can be seen as variants of the double description method for computing extreme rays in pointed polyhedral cones, (iii) introduction of a general framework and of new methods for redundancy removal and network compression, (iv) introduction of the new binary approach for computing extreme rays and elementary modes.</p><p>The binary approach computes elementary modes as binary patterns of participating reactions that are sufficient to compute the respective stoichiometric coefficients in a post-processing step. For many applications &#x02013; following the computation &#x02013; it is even sufficient to operate on the binary patterns of EMs. Among all applications of EMs presented in the introduction section, only the identification of all pathways with optimal yield, the "control-effective fluxes", and the <italic>&#x003b1;</italic>-spectrum need the explicit (real number) coefficients, i.e. the reaction rates, in the EMs. Whenever needed, the explicit representation of an EM can be determined (possibly temporarily) from its binary pattern.</p><p>The binary approach decreases the memory demand up to 96% without loss of speed and without loss of information giving the most efficient method available for computing elementary modes to date. The limiting step in computing elementary modes has thus been shifted back to the computation time. Parallelization &#x02013; as investigated within the traditional, not-binary, schema in [<xref ref-type="bibr" rid="B38">38</xref>] &#x02013; might lead to a further acceleration bringing us again a step closer to the complete set of EMs in genome-scale metabolic networks.</p></sec><sec sec-type="methods"><title>Methods</title><sec><title>Proof of Theorem 1</title><p>We prove first that each case a) and b) defines EMs of <italic>S'</italic>. Let <bold>e' </bold>be a flux vector defined by either case a) or b). Clearly <bold>N'e' </bold>= <bold>0 </bold>and <bold>e' </bold>&#x02265; <bold>0</bold>. In case b) <bold>e' </bold>is not elementary only if the single forward or backward reaction balances all internal metabolites, i.e. if the reaction includes not any internal species. We can safely exclude this pathologic case by considering that <bold>N </bold>does not contain a null column. Therefore, <bold>e' </bold>is elementary. In case a), assume <bold>e' </bold>is not elementary, i.e. there exists a non-null flux vector <bold>x' </bold>of <italic>S' </italic>not equivalent to <bold>e' </bold>such that <bold>x' </bold>&#x02265; <bold>0</bold>, <bold>N'x' </bold>= <bold>0 </bold>and <italic>R</italic>(<bold>x'</bold>) &#x02286; <italic>R</italic>(<bold>e'</bold>). By definition of the reconfiguration, for each <italic>i </italic>&#x02208; <italic>Rev</italic>, at least one among <italic>e'</italic><sub>(<italic>i</italic>,+1) </sub>or <italic>e'</italic><sub>(<italic>i</italic>,-1) </sub>equals zero and this holds consequently also for <bold>x'</bold>. Thus one can define <bold>e </bold>and <bold>x</bold>, the back-configurations of <bold>e' </bold>and <bold>x'</bold>. Now, by definition, <bold>e </bold>is an EM of S and is not equivalent to <bold>x</bold>, <bold>Nx </bold>= <bold>0</bold>, <italic>x</italic><sub><italic>i </italic></sub>&#x02265; 0<sub><italic>i </italic></sub>for <italic>i </italic>&#x02208; <italic>Irrev </italic>and <italic>R</italic>(<bold>x</bold>) &#x02286; <italic>R</italic>(<bold>e</bold>), a contradiction.</p><p>Hence each case a) and b) defines EMs of S'. We prove now that there is no other case. Assume there exists <bold>e' </bold>neither defined by a) nor b), such that <bold>e' </bold>&#x02265; <bold>0</bold>, <bold>N'e' </bold>= <bold>0 </bold>and <bold>e' </bold>elementary. For each <italic>i </italic>&#x02208; <italic>Rev </italic>at least one among <italic>e'</italic><sub>(<italic>i</italic>,+1) </sub>and <italic>e'</italic><sub>(<italic>i</italic>,-1) </sub>equals zero (otherwise the two-cycle defined on reaction <italic>i </italic>would satisfy the constraints and involve only a subset of the reactions of <bold>e'</bold>). Thus the back-configuration <bold>e </bold>of <bold>e' </bold>can be defined. By definition, <bold>e </bold>is not an EM of S. There exists <bold>x </bold>not equivalent to <bold>e </bold>such that <bold>Nx </bold>= <bold>0</bold>, <italic>x</italic><sub><italic>i </italic></sub>&#x02265; 0<sub><italic>i </italic></sub>for <italic>i </italic>&#x02208; <italic>Irrev </italic>and <italic>R</italic>(<bold>x</bold>) &#x02286; <italic>R</italic>(<bold>e</bold>). The reconfiguration <bold>x' </bold>of <bold>x </bold>is such that <bold>x' </bold>is not equivalent to <bold>e'</bold>, <bold>x' </bold>&#x02265; <bold>0</bold>, <bold>N'x' </bold>= <bold>0 </bold>and <italic>R</italic>(<bold>x'</bold>) &#x02286; <italic>R</italic>(<bold>e'</bold>), a contradiction.</p></sec><sec><title>Initialization of the <bold>R </bold>tableau in reconfigured networks</title><p>As in the case of non-reconfigured networks, we must initialize <bold>R </bold>in reconfigured networks as a null space matrix <bold>K' </bold>of <bold>N' </bold>having the special structure (8), i.e. <inline-graphic xlink:href="1471-2105-5-175-i43.gif"/>. Several kernel matrices having this form can exist. Here we are interested in such a one that contains as many zeros as possible because the number of zeros in the starting tableau <bold>R </bold>has a great impact on the number of ray combinations to be performed. For this purpose, we can exploit the fact that we already know |<italic>Rev</italic>| many very sparse vectors of the null space of <bold>N</bold>', namely the two-cycles emerging by splitting up reversible reactions. Our goal is therefore to incorporate many (if possible all) of these vectors into <bold>K </bold>to obtain <bold>K'</bold>. For this purpose, we first compute the kernel matrix <bold>K </bold>of <bold>N</bold>. Then, by simple linear combinations of columns (analogous to the well-known computation of a row-echelon form of a matrix) and possibly by permutation of rows in <bold>K</bold>, we try to obtain <inline-graphic xlink:href="1471-2105-5-175-i44.gif"/>, where only irreversible reactions (rows) are contained in the identity matrix <bold>I</bold>. If this is possible then we can easily include the backward directions of reversible reactions (as rows) and the two-cycles (as columns) into <bold>K </bold>yielding <bold>K'</bold>:</p><p><inline-graphic xlink:href="1471-2105-5-175-i45.gif"/></p><p>The first <italic>q </italic>- <italic>m </italic>columns in <bold>K' </bold>correspond to the original columns in <bold>K</bold>, but contain additionally zeros for the inserted backward reaction of originally reversible reactions. These columns are obviously linearly independent and are contained in the null space of <bold>N'</bold>. Sub-matrix <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/> is a |<italic>Rev</italic>| &#x000d7; |<italic>Rev</italic>| identity matrix whose rows correspond to the backward directions of split reactions. Finally, <bold>C </bold>is a |<italic>Rev</italic>| &#x000d7; <italic>m </italic>sub-matrix which complements <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/> in such a way that they represent together the two-cycles of the split reactions. (Thus, each column <italic>c</italic><sub><italic>i </italic></sub>in <bold>C </bold>contains only zeros, except a unity at that row, which corresponds to the forward direction of the split reversible reaction <italic>i</italic>. See also the example network.) <bold>I </bold>and <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/> yield together the new <bold>I'</bold>, whereas <inline-graphic xlink:href="1471-2105-5-175-i11.gif"/> and <bold>C </bold>represent together <inline-graphic xlink:href="1471-2105-5-175-i47.gif"/> of <bold>K'</bold>. Thus, <bold>K' </bold>contains <italic>q </italic>- <italic>m </italic>+ |<italic>Rev</italic>| linearly independent (basis) vectors of the null space of <bold>N' </bold>and is in form (8).</p><p>To our experience, in most realistic networks, a matrix <bold>K' </bold>as in (M1) can be found. Using instead an arbitrary <bold>K' </bold>can lead to a much larger computation effort because much more candidates are computed at an early state (see real network examples).</p><p>A further simple strategy avoiding that many rays are computed early is to sort the rows in <inline-graphic xlink:href="1471-2105-5-175-i47.gif"/> ascending with respect to the number of their non-zero entries.</p><p>In case it is not possible to arrange only irreversible reactions into the sub-matrix <bold>I </bold>of <bold>K</bold>, we can nevertheless find a matrix <bold>K' </bold>with the same basic structure as in (M1). However, for some originally reversible reactions, the forward (in <bold>I</bold>) <italic>and </italic>backward (in <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/>) direction will then be contained in <bold>I'</bold>. For each of those, the two-cycle cannot be represented by <bold>C </bold>and <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/> (because the row of the forward direction is contained in <bold>I' </bold>and not in <bold>K'</bold>) and another corresponding column in <bold>C </bold>has to be constructed. Assume a reversible reaction is contained as <italic>j</italic>-th row in <bold>I</bold>. Assume further that the inserted backward direction of this reaction corresponds to the <italic>k</italic>-th row of <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/>. For the <italic>k</italic>-th column <bold>c</bold><sub><italic>k </italic></sub>of <bold>C </bold>we can then chose the <italic>j</italic>-th column <inline-graphic xlink:href="1471-2105-5-175-i48.gif"/> of <inline-graphic xlink:href="1471-2105-5-175-i11.gif"/> multiplied by -1, i.e. <inline-graphic xlink:href="1471-2105-5-175-i49.gif"/>. Together with the <italic>k</italic>-th column in <inline-graphic xlink:href="1471-2105-5-175-i46.gif"/>, this gives a null space vector of <bold>N'</bold>, which is linearly independent of the others and can therefore serve as basis vector in <bold>K'</bold>. The vector <bold>c</bold><sub><italic>k </italic></sub>is now probably not that sparse. However, it enables us to retain the 2-cycles at least for those split reactions whose forward direction is not contained in <bold>I</bold>.</p><p>A MATLAB function <italic>initializeR </italic>that provides a proper initialization of <bold>R </bold>as described above (starting with the stoichiometric matrix <bold>N </bold>and the indices of the reversible reactions) can be obtained from the corresponding author.</p></sec><sec><title>Short introduction into MATLAB notation</title><p>Numeric variables in MATLAB can be scalars, vectors or two-dimensional arrays (i.e. matrices). To be more precise, a scalar in MATLAB is actually a 1 &#x000d7; 1 array and a vector is a 1 &#x000d7; n or n &#x000d7; 1 array. Size and type of a variable are automatically declared (or changed) by assignments to it. The following examples illustrate how to assign or access values of variables:</p><p>&#x02022; scalar: a = 1;</p><p>&#x02022; b(3) = 5; the value 5 is assigned to the third element of (vector) <italic>b</italic>.</p><p>&#x02022; c(1:3) = [5,8,9]; here, "1:3" expresses "from 1 to 3", thus, 5, 8 and 9 are assigned to the first three elements of vector <italic>c</italic>. It is also possible to use an array of integers to access the elements of a vector, e.g. a = [2,3,4]; b = [1,3]; c = a(b). Vector c reads then [2,4].</p><p>&#x02022; mat(2,5) = 3; value 3 is assigned to the element in the second row and fifth column of matrix <italic>mat</italic>.</p><p>&#x02022; mat1(3,:) = mat2(5,:); the values of the fifth row of matrix <italic>mat1 </italic>is copied into the third row of matrix <italic>mat2</italic>. Here, the colon operator ":" expresses "all elements of the respective dimension" (here: columns). Of course, it must be ensured that <italic>mat1 </italic>and <italic>mat2 </italic>have the same number of columns.</p><p>&#x02022; a = mat(7,1:3); the first three elements of the seventh row of matrix <italic>mat </italic>are assigned to <italic>a </italic>which is now a 3-element vector.</p><p>&#x02022; a= [17,34,39]; a(2)= []; deletes the second element of <italic>a </italic>and shifts all elements behind one position back, i.e. vector <italic>a </italic>reads now [17,39].</p><p>The pseudo-code given in Figure <xref ref-type="fig" rid="F4">4</xref> in the main text uses several basic routines pre-defined in MATLAB (written in bold) :</p><p>&#x02022; c = <bold>length</bold>(a); if <italic>a </italic>is a vector (as in all cases in the pseudo-code) then <bold>length </bold>returns the number of elements in <italic>a</italic>.</p><p>&#x02022; c = <bold>find</bold>(a); if <italic>a </italic>is a vector (as in all cases in the pseudo-code) then <bold>find </bold>returns all positions in <italic>a </italic>which are not zero. Example: <bold>find</bold>([23,0,5,9,0]) returns (1, 3, 4).</p><p>&#x02022; c = <bold>or</bold>(a,b) returns the result of the logical OR operation applied element-wise to <italic>a </italic>and <italic>b</italic>. <italic>a </italic>and <italic>b </italic>can be scalars, vectors or matrices and must have the same size. Example: if <italic>a </italic>= [1,0,29], <italic>b </italic>= [1,0,0] then <bold>or</bold>(<italic>a</italic>,<italic>b</italic>) returns [1,0,1]. In the pseudo-code, we use this routine exclusively for OR-operations of bit masks (arrays with only "ones" and "zeros").</p><p>&#x02022; c = <bold>zeros</bold>(m,n) returns a matrix of size m &#x000d7; n filled with zeros.</p><p>&#x02022; c = <bold>null</bold>(a) returns a null-space matrix of matrix a.</p><p>&#x02022; c = <bold>intersect</bold>(a,b) returns the intersection of elements in vectors <italic>a </italic>and <italic>b</italic>.</p><p>&#x02022; c = <bold>all</bold>(b) returns "1" if all entries in vector b are not zero and "0" otherwise.</p></sec></sec><sec><title>List of abbreviations</title><p>EM(s): Elementary Mode(s) also known as Elementary Flux Mode(s).</p></sec><sec><title>Authors' contributions</title><p>Both authors contributed equally to this work, the starting idea of the binary approach coming from a discussion between them. JG mainly established the relationships between extreme ray and elementary modes computation. SK mainly devised and implemented the binary null-space algorithm. Both authors prepared the manuscript jointly.</p></sec></body><back><ack><sec><title>Acknowledgements</title><p>We thank Clemens Wagner for providing us with the software <italic>coverN </italic>and Axel von Kamp for helpful discussions. We are grateful to Georg Casari and Toby Mathieson for reading the manuscript.</p></sec></ack><ref-list><ref id="B1"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Rockafellar</surname><given-names>RT</given-names></name></person-group><source>Convex analysis</source><year>1970</year><publisher-name>Princeton: Princeton University Press</publisher-name></citation></ref><ref id="B2"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schilling</surname><given-names>CH</given-names></name><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name><name><surname>Heinrich</surname><given-names>R</given-names></name></person-group><article-title>Metabolic pathway analysis: basic concepts and scientific applications in the post-genomic era</article-title><source>Biotechnol Prog</source><year>1999</year><volume>15</volume><fpage>296</fpage><lpage>303</lpage><pub-id pub-id-type="pmid">10356246</pub-id><pub-id pub-id-type="doi">10.1021/bp990048k</pub-id></citation></ref><ref id="B3"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Dandekar</surname><given-names>T</given-names></name><name><surname>Fell</surname><given-names>DA</given-names></name></person-group><article-title>Detection of elementary flux modes in biochemical networks: a promising tool for pathway analysis and metabolic engineering</article-title><source>Trends Biotechnol</source><year>1999</year><volume>17</volume><fpage>53</fpage><lpage>60</lpage><pub-id pub-id-type="pmid">10087604</pub-id><pub-id pub-id-type="doi">10.1016/S0167-7799(98)01290-6</pub-id></citation></ref><ref id="B4"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Fell</surname><given-names>DA</given-names></name><name><surname>Dandekar</surname><given-names>T</given-names></name></person-group><article-title>A general definition of metabolic pathways useful for systematic organization and analysis of complex metabolic networks</article-title><source>Nat Biotechnol</source><year>2000</year><volume>18</volume><fpage>326</fpage><lpage>332</lpage><pub-id pub-id-type="pmid">10700151</pub-id><pub-id pub-id-type="doi">10.1038/73786</pub-id></citation></ref><ref id="B5"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Papin</surname><given-names>JA</given-names></name><name><surname>Price</surname><given-names>ND</given-names></name><name><surname>Wiback</surname><given-names>SJ</given-names></name><name><surname>Fell</surname><given-names>DA</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Metabolic pathways in the post-genome era</article-title><source>Trends Biochem Sci</source><year>2003</year><volume>28</volume><fpage>250</fpage><lpage>258</lpage><pub-id pub-id-type="pmid">12765837</pub-id><pub-id pub-id-type="doi">10.1016/S0968-0004(03)00064-1</pub-id></citation></ref><ref id="B6"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Hilgetag</surname><given-names>C</given-names></name></person-group><article-title>On elementary flux modes in biochemical reaction systems at steady tate</article-title><source>J Biol Syst</source><year>1994</year><volume>2</volume><fpage>165</fpage><lpage>182</lpage><pub-id pub-id-type="doi">10.1142/S0218339094000131</pub-id></citation></ref><ref id="B7"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Hilgetag</surname><given-names>C</given-names></name><name><surname>Woods</surname><given-names>JH</given-names></name><name><surname>Fell</surname><given-names>DA</given-names></name></person-group><article-title>Reaction routes in biochemical reaction systems: algebraic properties, validated calculation procedure and example from nucleotide metabolism</article-title><source>J Math Biol</source><year>2002</year><volume>45</volume><fpage>153</fpage><lpage>181</lpage><pub-id pub-id-type="pmid">12181603</pub-id><pub-id pub-id-type="doi">10.1007/s002850200143</pub-id></citation></ref><ref id="B8"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schilling</surname><given-names>CH</given-names></name><name><surname>Letscher</surname><given-names>D</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Theory for the systemic definition of metabolic pathways and their use in interpreting metabolic function from a pathway-oriented perspective</article-title><source>J Theor Biol</source><year>2000</year><volume>203</volume><fpage>229</fpage><lpage>248</lpage><pub-id pub-id-type="pmid">10716907</pub-id><pub-id pub-id-type="doi">10.1006/jtbi.2000.1073</pub-id></citation></ref><ref id="B9"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Papin</surname><given-names>JA</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Price</surname><given-names>ND</given-names></name><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Comparison of network-based pathway analysis methods</article-title><source>Trends Biotechnol</source><year>2004</year><volume>22</volume><fpage>400</fpage><lpage>405</lpage><pub-id pub-id-type="pmid">15283984</pub-id><pub-id pub-id-type="doi">10.1016/j.tibtech.2004.06.010</pub-id></citation></ref><ref id="B10"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name></person-group><article-title>Two approaches for metabolic pathway analysis?</article-title><source>Trends Biotechnol</source><year>2003</year><volume>21</volume><fpage>64</fpage><lpage>69</lpage><pub-id pub-id-type="pmid">12573854</pub-id><pub-id pub-id-type="doi">10.1016/S0167-7799(02)00034-3</pub-id></citation></ref><ref id="B11"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Bettenbrock</surname><given-names>K</given-names></name><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Gilles</surname><given-names>ED</given-names></name></person-group><article-title>Metabolic network structure determines key aspects of functionality and regulation</article-title><source>Nature</source><year>2002</year><volume>420</volume><fpage>190</fpage><lpage>193</lpage><pub-id pub-id-type="pmid">12432396</pub-id><pub-id pub-id-type="doi">10.1038/nature01166</pub-id></citation></ref><ref id="B12"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Price</surname><given-names>ND</given-names></name><name><surname>Papin</surname><given-names>JA</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Determination of redundancy and systems properties of the metabolic network of Helicobacter pylori using genome-scale extreme pathway analysis</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><fpage>760</fpage><lpage>769</lpage><pub-id pub-id-type="pmid">11997342</pub-id><comment>10.1101/gr.218002. Article published online before print in April 2002</comment></citation></ref><ref id="B13"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Papin</surname><given-names>JA</given-names></name><name><surname>Price</surname><given-names>ND</given-names></name><name><surname>Edwards</surname><given-names>JS</given-names></name><name><surname>Palsson</surname><given-names>BB</given-names></name></person-group><article-title>The genome-scale metabolic extreme pathway structure in Haemophilus influenzae shows significant network redundancy</article-title><source>J Theor Biol</source><year>2002</year><volume>215</volume><fpage>67</fpage><lpage>82</lpage><pub-id pub-id-type="pmid">12051985</pub-id><pub-id pub-id-type="doi">10.1006/jtbi.2001.2499</pub-id></citation></ref><ref id="B14"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Weckwerth</surname><given-names>W</given-names></name><name><surname>Moldenhauer</surname><given-names>F</given-names></name><name><surname>Pfeiffer</surname><given-names>T</given-names></name></person-group><article-title>Use of network analysis of metabolic systems in Bioengineering</article-title><source>Bioproc Biosyst Eng</source><year>2002</year><volume>24</volume><fpage>363</fpage><lpage>372</lpage><pub-id pub-id-type="doi">10.1007/s004490100253</pub-id></citation></ref><ref id="B15"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Cakir</surname><given-names>T</given-names></name><name><surname>Kirdar</surname><given-names>B</given-names></name><name><surname>Ulgen</surname><given-names>KO</given-names></name></person-group><article-title>Metabolic pathway analysis of yeast strengthens the bridge between transcriptomics and metabolic networks</article-title><source>Biotechnol Bioeng</source><year>2004</year><volume>86</volume><fpage>251</fpage><lpage>260</lpage><pub-id pub-id-type="pmid">15083505</pub-id><pub-id pub-id-type="doi">10.1002/bit.20020</pub-id></citation></ref><ref id="B16"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Papin</surname><given-names>JA</given-names></name><name><surname>Price</surname><given-names>ND</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Extreme pathway lengths and reaction participation in genome-scale metabolic networks</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><fpage>1889</fpage><lpage>1900</lpage><pub-id pub-id-type="pmid">12466293</pub-id><pub-id pub-id-type="doi">10.1101/gr.327702</pub-id></citation></ref><ref id="B17"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Burgard</surname><given-names>AP</given-names></name><name><surname>Nikolaev</surname><given-names>EV</given-names></name><name><surname>Schilling</surname><given-names>CH</given-names></name><name><surname>Maranas</surname><given-names>CD</given-names></name></person-group><article-title>Flux coupling analysis of genome-scale metabolic network reconstructions</article-title><source>Genome Res</source><year>2004</year><volume>14</volume><fpage>301</fpage><lpage>312</lpage><pub-id pub-id-type="pmid">14718379</pub-id><pub-id pub-id-type="doi">10.1101/gr.1926504</pub-id></citation></ref><ref id="B18"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Price</surname><given-names>ND</given-names></name><name><surname>Famili</surname><given-names>I</given-names></name><name><surname>Beard</surname><given-names>DA</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Extreme pathways and Kirchhoff's second law</article-title><source>Biophys J</source><year>2002</year><volume>83</volume><fpage>2879</fpage><lpage>2882</lpage><pub-id pub-id-type="pmid">12425318</pub-id></citation></ref><ref id="B19"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Beard</surname><given-names>DA</given-names></name><name><surname>Liang</surname><given-names>SD</given-names></name><name><surname>Qian</surname><given-names>H</given-names></name></person-group><article-title>Energy balance for analysis of complex metabolic networks</article-title><source>Biophys J</source><year>2002</year><volume>83</volume><fpage>79</fpage><lpage>86</lpage><pub-id pub-id-type="pmid">12080101</pub-id></citation></ref><ref id="B20"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Covert</surname><given-names>MW</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Constraints-based models: regulation of gene expression reduces the steady-state solution space</article-title><source>J Theor Biol</source><year>2003</year><volume>221</volume><fpage>309</fpage><lpage>325</lpage><pub-id pub-id-type="pmid">12642111</pub-id><pub-id pub-id-type="doi">10.1006/jtbi.2003.3071</pub-id></citation></ref><ref id="B21"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Gilles</surname><given-names>ED</given-names></name></person-group><article-title>Minimal cut sets in biochemical reaction networks</article-title><source>Bioinformatics</source><year>2004</year><volume>20</volume><fpage>226</fpage><lpage>234</lpage><pub-id pub-id-type="pmid">14734314</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btg395</pub-id></citation></ref><ref id="B22"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Wiback</surname><given-names>SJ</given-names></name><name><surname>Mahadevan</surname><given-names>R</given-names></name><name><surname>Palsson</surname><given-names>BO</given-names></name></person-group><article-title>Reconstructing metabolic flux vectors from extreme pathways: defining the alpha-spectrum</article-title><source>J Theor Biol</source><year>2003</year><volume>224</volume><fpage>313</fpage><lpage>324</lpage><pub-id pub-id-type="pmid">12941590</pub-id><pub-id pub-id-type="doi">10.1016/S0022-5193(03)00168-1</pub-id></citation></ref><ref id="B23"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name></person-group><article-title>Combinatorial complexity of pathway analysis in metabolic networks</article-title><source>Mol Biol Rep</source><year>2002</year><volume>29</volume><fpage>233</fpage><lpage>236</lpage><pub-id pub-id-type="pmid">12241063</pub-id><pub-id pub-id-type="doi">10.1023/A:1020390132244</pub-id></citation></ref><ref id="B24"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Wagner</surname><given-names>C</given-names></name></person-group><article-title>Nullspace Approach to Determine the Elementary Modes of Chemical Reaction Systems</article-title><source>J Phys Chem B</source><year>2004</year><volume>108</volume><fpage>2425</fpage><lpage>2431</lpage><pub-id pub-id-type="doi">10.1021/jp034523f</pub-id></citation></ref><ref id="B25"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Fukuda</surname><given-names>K</given-names></name><name><surname>Prodon</surname><given-names>A</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Deza M, Euler R, Manoussakis I</surname></name></person-group><article-title>Double Description method revisited</article-title><source>In Combinatorics and Computer Science</source><year>1996</year><volume>1120</volume><publisher-name>Springer-Verlag</publisher-name><fpage>91</fpage><lpage>111</lpage></citation></ref><ref id="B26"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Franklin</surname><given-names>J</given-names></name></person-group><source>Methods of Mathematical Economics</source><year>1980</year><publisher-name>New York: Springer Verlag</publisher-name></citation></ref><ref id="B27"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Clarke</surname><given-names>BL</given-names></name></person-group><article-title>Stoichiometric network analysis</article-title><source>Cell Biophys</source><year>1988</year><volume>12</volume><fpage>237</fpage><lpage>253</lpage><pub-id pub-id-type="pmid">2453282</pub-id></citation></ref><ref id="B28"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Motzkin</surname><given-names>TS</given-names></name><name><surname>Raiffa</surname><given-names>H</given-names></name><name><surname>Thompson</surname><given-names>GL</given-names></name><name><surname>Thrall</surname><given-names>RM</given-names></name></person-group><article-title>The Double Description Method</article-title><source>Annals of Math Studies</source><year>1953</year><volume>8</volume><publisher-name>Princeton University Press</publisher-name><fpage>51</fpage><lpage>73</lpage></citation></ref><ref id="B29"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Pfeiffer</surname><given-names>T</given-names></name><name><surname>Sanchez-Valdenebro</surname><given-names>I</given-names></name><name><surname>Nuno</surname><given-names>JC</given-names></name><name><surname>Montero</surname><given-names>F</given-names></name><name><surname>Schuster</surname><given-names>S</given-names></name></person-group><article-title>METATOOL: for studying metabolic networks</article-title><source>Bioinformatics</source><year>1999</year><volume>15</volume><fpage>251</fpage><lpage>257</lpage><pub-id pub-id-type="pmid">10222413</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/15.3.251</pub-id></citation></ref><ref id="B30"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Klamt</surname><given-names>S</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Ginkel</surname><given-names>M</given-names></name><name><surname>Gilles</surname><given-names>ED</given-names></name></person-group><article-title>FluxAnalyzer: exploring structure, pathways, and flux distributions in metabolic networks on interactive flux maps</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>261</fpage><lpage>269</lpage><pub-id pub-id-type="pmid">12538248</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/19.2.261</pub-id></citation></ref><ref id="B31"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Heinrich</surname><given-names>R</given-names></name><name><surname>Schuster</surname><given-names>S</given-names></name></person-group><source>The Regulation of Cellular Systems</source><year>1996</year><publisher-name>New York: Chapman &#x00026; Hall</publisher-name></citation></ref><ref id="B32"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Schuster</surname><given-names>S</given-names></name><name><surname>Schuster</surname><given-names>R</given-names></name></person-group><article-title>Detecting strictly detailed balanced subnetwroks in open chemical reaction networks</article-title><source>J Math Chem</source><year>1991</year><volume>6</volume><fpage>17</fpage><lpage>40</lpage></citation></ref><ref id="B33"><citation citation-type="other"><article-title>lrs homepage</article-title><ext-link ext-link-type="uri" xlink:href="http://cgm.cs.mcgill.ca/~avis/C/lrs.html"/></citation></ref><ref id="B34"><citation citation-type="other"><article-title>FluxAnalyzer homepage</article-title><ext-link ext-link-type="uri" xlink:href="http://www.mpi-magdeburg.mpg.de/projects/fluxanalyzer"/></citation></ref><ref id="B35"><citation citation-type="book"><person-group person-group-type="author"><name><surname>Bj&#x000f6;rner</surname><given-names>A</given-names></name><name><surname>Vergnas</surname><given-names>ML</given-names></name><name><surname>Sturmfels</surname><given-names>B</given-names></name><name><surname>White</surname><given-names>N</given-names></name><name><surname>Ziegler</surname><given-names>GM</given-names></name></person-group><source>Oriented matroids</source><year>1999</year><publisher-name>Cambridge: University Press</publisher-name></citation></ref><ref id="B36"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Beard</surname><given-names>DA</given-names></name><name><surname>Babson</surname><given-names>E</given-names></name><name><surname>Curtis</surname><given-names>E</given-names></name><name><surname>Qian</surname><given-names>H</given-names></name></person-group><article-title>Thermodynamic constraints for biochemical networks</article-title><source>J Theor Biol</source><year>2004</year><volume>228</volume><fpage>327</fpage><lpage>333</lpage><pub-id pub-id-type="pmid">15135031</pub-id><pub-id pub-id-type="doi">10.1016/j.jtbi.2004.01.008</pub-id></citation></ref><ref id="B37"><citation citation-type="journal"><person-group person-group-type="author"><name><surname>Avis</surname><given-names>D</given-names></name><name><surname>Fukuda</surname><given-names>K</given-names></name></person-group><article-title>A pivoting algorithm for convex hulls and vertex enumeration of arrangements and polyhedra</article-title><source>Discrete Comput Geom</source><year>1992</year><volume>8</volume><fpage>295</fpage><lpage>313</lpage></citation></ref><ref id="B38"><citation citation-type="other"><person-group person-group-type="author"><name><surname>Samatova</surname><given-names>NF</given-names></name><name><surname>Geist</surname><given-names>A</given-names></name><name><surname>Ostrouchov</surname><given-names>G</given-names></name><name><surname>Melechko</surname><given-names>A</given-names></name></person-group><article-title>Parallel Out-of-core Algorithm for Genome-scale Enumeration of Metabolic Systemic Pathways</article-title><source>In HiCOMB 2002 Fort Lauderdale, FL, USA</source><year>2002</year></citation></ref></ref-list></back></article>



